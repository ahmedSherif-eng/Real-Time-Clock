
RealTimeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000fce  00001062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000b2  008000b2  000010b4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001808  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ee  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059f  00000000  00000000  00003036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b79  00000000  00000000  000035d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00004150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  0000446c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa6  00000000  00000000  00004821  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3b       	cpi	r26, 0xB5	; 181
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 05 	call	0xba4	; 0xba4 <main>
  8a:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_vInt>:
#include "KEYPAD.h"
void Keypad_vInt( char port)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	 DIO_SET_PIN_DIRECTION(port,0,1);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_SET_PIN_DIRECTION(port,1,1);
  9e:	8c 2f       	mov	r24, r28
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_SET_PIN_DIRECTION(port,2,1);
  a8:	8c 2f       	mov	r24, r28
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_SET_PIN_DIRECTION(port,3,1);
  b2:	8c 2f       	mov	r24, r28
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_SET_PIN_DIRECTION(port,4,0);
  bc:	8c 2f       	mov	r24, r28
  be:	64 e0       	ldi	r22, 0x04	; 4
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_SET_PIN_DIRECTION(port,5,0);
  c6:	8c 2f       	mov	r24, r28
  c8:	65 e0       	ldi	r22, 0x05	; 5
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_SET_PIN_DIRECTION(port,6,0);
  d0:	8c 2f       	mov	r24, r28
  d2:	66 e0       	ldi	r22, 0x06	; 6
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_SET_PIN_DIRECTION(port,7,0);
  da:	8c 2f       	mov	r24, r28
  dc:	67 e0       	ldi	r22, 0x07	; 7
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	 DIO_vConnectPullUp(port,4,1);
  e4:	8c 2f       	mov	r24, r28
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_vConnectPullUp>
	 DIO_vConnectPullUp(port,5,1);
  ee:	8c 2f       	mov	r24, r28
  f0:	65 e0       	ldi	r22, 0x05	; 5
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_vConnectPullUp>
	 DIO_vConnectPullUp(port,6,1);
  f8:	8c 2f       	mov	r24, r28
  fa:	66 e0       	ldi	r22, 0x06	; 6
  fc:	41 e0       	ldi	r20, 0x01	; 1
  fe:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_vConnectPullUp>
	 DIO_vConnectPullUp(port,7,1);
 102:	8c 2f       	mov	r24, r28
 104:	67 e0       	ldi	r22, 0x07	; 7
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_vConnectPullUp>
	

}	
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <KeypadRead>:
  char  KeypadRead( char port){
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	60 97       	sbiw	r28, 0x10	; 16
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	08 2f       	mov	r16, r24
	
	 char arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9',' '},{'*','0','=','.'}};
 12c:	de 01       	movw	r26, r28
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	e1 f7       	brne	.-8      	; 0x136 <KeypadRead+0x26>
	 char row,coloumn,x;
	 char returnval=NotPressed;
	 for(row=0;row<=3;row++)
 13e:	ff 24       	eor	r15, r15
	 {
		 DIO_WRITE(port,0,1);
 140:	80 2f       	mov	r24, r16
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		 DIO_WRITE(port,1,1);
 14a:	80 2f       	mov	r24, r16
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		 DIO_WRITE(port,2,1);
 154:	80 2f       	mov	r24, r16
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		 DIO_WRITE(port,3,1);
 15e:	80 2f       	mov	r24, r16
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		 DIO_WRITE(port,row,0);
 168:	80 2f       	mov	r24, r16
 16a:	6f 2d       	mov	r22, r15
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		 
		 for(coloumn=0;coloumn<=3;coloumn++)
 172:	10 e0       	ldi	r17, 0x00	; 0
		 {
			 x=DIO_READ(port,(coloumn+4));
 174:	61 2f       	mov	r22, r17
 176:	6c 5f       	subi	r22, 0xFC	; 252
 178:	80 2f       	mov	r24, r16
 17a:	0e 94 99 03 	call	0x732	; 0x732 <DIO_READ>
			 if(x==0)
 17e:	88 23       	and	r24, r24
 180:	61 f4       	brne	.+24     	; 0x19a <KeypadRead+0x8a>
			 {
				 returnval=arr[row][coloumn];
 182:	ef 2d       	mov	r30, r15
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e1 0f       	add	r30, r17
 190:	f1 1d       	adc	r31, r1
 192:	ec 0f       	add	r30, r28
 194:	fd 1f       	adc	r31, r29
 196:	81 81       	ldd	r24, Z+1	; 0x01
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <KeypadRead+0x92>
		 DIO_WRITE(port,1,1);
		 DIO_WRITE(port,2,1);
		 DIO_WRITE(port,3,1);
		 DIO_WRITE(port,row,0);
		 
		 for(coloumn=0;coloumn<=3;coloumn++)
 19a:	1f 5f       	subi	r17, 0xFF	; 255
 19c:	14 30       	cpi	r17, 0x04	; 4
 19e:	51 f7       	brne	.-44     	; 0x174 <KeypadRead+0x64>
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <KeypadRead+0xaa>
		 {
			 break;
		 }
	 }
	 return returnval ;
 1a2:	60 96       	adiw	r28, 0x10	; 16
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	08 95       	ret
  char  KeypadRead( char port){
	
	 char arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9',' '},{'*','0','=','.'}};
	 char row,coloumn,x;
	 char returnval=NotPressed;
	 for(row=0;row<=3;row++)
 1ba:	f3 94       	inc	r15
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	f8 16       	cp	r15, r24
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <KeypadRead+0xb4>
 1c2:	be cf       	rjmp	.-132    	; 0x140 <KeypadRead+0x30>
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	ed cf       	rjmp	.-38     	; 0x1a2 <KeypadRead+0x92>

000001c8 <LCD_vEnable>:
}
void  LCD_vEnable()
{	
	
	//sending falling edge
	DIO_WRITE('b',E,1);
 1c8:	82 e6       	ldi	r24, 0x62	; 98
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_vEnable+0xe>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_vEnable+0x14>
 1dc:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE('b',E,0);
 1de:	82 e6       	ldi	r24, 0x62	; 98
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_vEnable+0x24>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_vEnable+0x2a>
 1f2:	00 00       	nop
	_delay_ms(2);
}
 1f4:	08 95       	ret

000001f6 <LCD_vSend_cmd>:
void LCD_vSend_cmd( char cmd)
{
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
		DIO_WRITE_PORT(PORT,cmd);
		DIO_WRITE('B',RS,0);//write to control register
		LCD_vEnable();
		_delay_ms(1);
	#elif defined four_bit_mode
		DIO_WRITE_LowNipple(PORT,cmd>>4); 
 1fa:	68 2f       	mov	r22, r24
 1fc:	62 95       	swap	r22
 1fe:	6f 70       	andi	r22, 0x0F	; 15
 200:	83 e6       	ldi	r24, 0x63	; 99
 202:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DIO_WRITE_LowNipple>
		DIO_WRITE('B',RS,0);
 206:	82 e4       	ldi	r24, 0x42	; 66
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		LCD_vEnable();
 210:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_vEnable>
 214:	8f ec       	ldi	r24, 0xCF	; 207
 216:	97 e0       	ldi	r25, 0x07	; 7
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_vSend_cmd+0x22>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_vSend_cmd+0x28>
 21e:	00 00       	nop
		_delay_ms(1);
		DIO_WRITE_LowNipple(PORT,cmd);
 220:	83 e6       	ldi	r24, 0x63	; 99
 222:	6c 2f       	mov	r22, r28
 224:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DIO_WRITE_LowNipple>
		DIO_WRITE('B',RS,0);
 228:	82 e4       	ldi	r24, 0x42	; 66
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		LCD_vEnable();
 232:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_vEnable>
 236:	8f ec       	ldi	r24, 0xCF	; 207
 238:	97 e0       	ldi	r25, 0x07	; 7
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_vSend_cmd+0x44>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_vSend_cmd+0x4a>
 240:	00 00       	nop
		_delay_ms(1);
	#endif
}
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_vInit>:
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	91 ee       	ldi	r25, 0xE1	; 225
 24a:	a4 e0       	ldi	r26, 0x04	; 4
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	a0 40       	sbci	r26, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <LCD_vInit+0x6>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_vInit+0x10>
 256:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined four_bit_mode
	//write on low nipple
	DIO_SET_PIN_DIRECTION(PORT,0,1);
 258:	83 e6       	ldi	r24, 0x63	; 99
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(PORT,1,1);
 262:	83 e6       	ldi	r24, 0x63	; 99
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(PORT,2,1);
 26c:	83 e6       	ldi	r24, 0x63	; 99
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(PORT,3,1);
 276:	83 e6       	ldi	r24, 0x63	; 99
 278:	63 e0       	ldi	r22, 0x03	; 3
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(PORT,4,1);
 280:	83 e6       	ldi	r24, 0x63	; 99
 282:	64 e0       	ldi	r22, 0x04	; 4
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION('b',E,1);
 28a:	82 e6       	ldi	r24, 0x62	; 98
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION('b',RS,1);
 294:	82 e6       	ldi	r24, 0x62	; 98
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION('b',RW,1);
 29e:	82 e6       	ldi	r24, 0x62	; 98
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_WRITE('b',RW,0);
 2a8:	82 e6       	ldi	r24, 0x62	; 98
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
	LCD_vSend_cmd(RETURN_HOME);
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 2b8:	af e1       	ldi	r26, 0x1F	; 31
 2ba:	be e4       	ldi	r27, 0x4E	; 78
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_vInit+0x76>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_vInit+0x7c>
 2c2:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS);
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 2ca:	8f ec       	ldi	r24, 0xCF	; 207
 2cc:	97 e0       	ldi	r25, 0x07	; 7
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_vInit+0x88>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_vInit+0x8e>
 2d4:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(DISPLAY_ON);
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
 2d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 2dc:	af ec       	ldi	r26, 0xCF	; 207
 2de:	b7 e0       	ldi	r27, 0x07	; 7
 2e0:	11 97       	sbiw	r26, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_vInit+0x9a>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <LCD_vInit+0xa0>
 2e6:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(ClEAR_SCREEN);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 2ee:	8f e1       	ldi	r24, 0x1F	; 31
 2f0:	9e e4       	ldi	r25, 0x4E	; 78
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_vInit+0xac>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_vInit+0xb2>
 2f8:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 300:	af ec       	ldi	r26, 0xCF	; 207
 302:	b7 e0       	ldi	r27, 0x07	; 7
 304:	11 97       	sbiw	r26, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_vInit+0xbe>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_vInit+0xc4>
 30a:	00 00       	nop
	_delay_ms(1);
	#endif
}
 30c:	08 95       	ret

0000030e <LCD_vSend_char>:
		LCD_vEnable();
		_delay_ms(1);
	#endif
}
void LCD_vSend_char( char data)
{
 30e:	cf 93       	push	r28
 310:	c8 2f       	mov	r28, r24
		DIO_WRITE_PORT(PORT,data);
		DIO_WRITE('B',RS,1);//write to data register
		LCD_vEnable();
		_delay_ms(1);
	#elif defined four_bit_mode
		DIO_WRITE_LowNipple(PORT,data>>4);
 312:	68 2f       	mov	r22, r24
 314:	62 95       	swap	r22
 316:	6f 70       	andi	r22, 0x0F	; 15
 318:	83 e6       	ldi	r24, 0x63	; 99
 31a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DIO_WRITE_LowNipple>
		DIO_WRITE('B',RS,1);
 31e:	82 e4       	ldi	r24, 0x42	; 66
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		LCD_vEnable();
 328:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_vEnable>
 32c:	8f ec       	ldi	r24, 0xCF	; 207
 32e:	97 e0       	ldi	r25, 0x07	; 7
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_vSend_char+0x22>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_vSend_char+0x28>
 336:	00 00       	nop
		_delay_ms(1);
		DIO_WRITE_LowNipple(PORT,data);
 338:	83 e6       	ldi	r24, 0x63	; 99
 33a:	6c 2f       	mov	r22, r28
 33c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DIO_WRITE_LowNipple>
		DIO_WRITE('B',RS,1);
 340:	82 e4       	ldi	r24, 0x42	; 66
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
		LCD_vEnable();
 34a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_vEnable>
 34e:	8f ec       	ldi	r24, 0xCF	; 207
 350:	97 e0       	ldi	r25, 0x07	; 7
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCD_vSend_char+0x44>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_vSend_char+0x4a>
 358:	00 00       	nop
		_delay_ms(1);
	#endif
}
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{	static unsigned char counter=0;
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 364:	88 81       	ld	r24, Y
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <LCD_vSend_string+0x18>
		LCD_vEnable();
		_delay_ms(1);
	#endif
}

void LCD_vSend_string(char *data)
 36a:	21 96       	adiw	r28, 0x01	; 1
{	static unsigned char counter=0;
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 36c:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSend_char>
	#endif
}

void LCD_vSend_string(char *data)
{	static unsigned char counter=0;
	while((*data)!='\0')
 370:	89 91       	ld	r24, Y+
 372:	88 23       	and	r24, r24
 374:	d9 f7       	brne	.-10     	; 0x36c <LCD_vSend_string+0xe>
		{
			LCD_vMove_Cursor(2,1);
			LCD_vSend_char(PORT);
		}*/
	}
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <LCD_vClear_Screen>:
void LCD_vClear_Screen()
{
	LCD_vSend_cmd(0x01);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 382:	8f e1       	ldi	r24, 0x1F	; 31
 384:	9e e4       	ldi	r25, 0x4E	; 78
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_vClear_Screen+0xa>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_vClear_Screen+0x10>
 38c:	00 00       	nop
	_delay_ms(10);
		
}
 38e:	08 95       	ret

00000390 <LCD_vReturn_Home>:
void LCD_vReturn_Home()
{
	LCD_vSend_cmd(0x02);
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 396:	8f e1       	ldi	r24, 0x1F	; 31
 398:	9e e4       	ldi	r25, 0x4E	; 78
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_vReturn_Home+0xa>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCD_vReturn_Home+0x10>
 3a0:	00 00       	nop
	_delay_ms(10);
}
 3a2:	08 95       	ret

000003a4 <LCD_vMove_Cursor>:
void LCD_vMove_Cursor(unsigned char row,unsigned char column)
{
	if(1==row)
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	59 f4       	brne	.+22     	; 0x3be <LCD_vMove_Cursor+0x1a>
	{
		LCD_vSend_cmd((0x80+column-1));
 3a8:	86 2f       	mov	r24, r22
 3aa:	81 58       	subi	r24, 0x81	; 129
 3ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 3b0:	8f e1       	ldi	r24, 0x1F	; 31
 3b2:	9e e4       	ldi	r25, 0x4E	; 78
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_vMove_Cursor+0x10>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_vMove_Cursor+0x16>
 3ba:	00 00       	nop
 3bc:	08 95       	ret
		_delay_ms(10);
	}
	else if(2==row)
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	59 f4       	brne	.+22     	; 0x3d8 <LCD_vMove_Cursor+0x34>
	{
		LCD_vSend_cmd((0xc0+column-1));
 3c2:	86 2f       	mov	r24, r22
 3c4:	81 54       	subi	r24, 0x41	; 65
 3c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_vSend_cmd>
 3ca:	8f e1       	ldi	r24, 0x1F	; 31
 3cc:	9e e4       	ldi	r25, 0x4E	; 78
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_vMove_Cursor+0x2a>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_vMove_Cursor+0x30>
 3d4:	00 00       	nop
 3d6:	08 95       	ret
		_delay_ms(10);
	}
	else
	{
		LCD_vReturn_Home();
 3d8:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vReturn_Home>
 3dc:	8f e1       	ldi	r24, 0x1F	; 31
 3de:	9e e4       	ldi	r25, 0x4E	; 78
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_vMove_Cursor+0x3c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_vMove_Cursor+0x42>
 3e6:	00 00       	nop
 3e8:	08 95       	ret

000003ea <seg_vinit>:
#include "../MCAL/DIO_DRIVER.h"
#include <avr/io.h>
unsigned char num[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f,0x77,0x7f,0x39,0x3f,0x79,0x71};
void seg_vinit(unsigned char port)
{
	DIO_SET_PORT_DIRECTION(port,0xff);
 3ea:	6f ef       	ldi	r22, 0xFF	; 255
 3ec:	0e 94 01 04 	call	0x802	; 0x802 <DIO_SET_PORT_DIRECTION>
}
 3f0:	08 95       	ret

000003f2 <seg_vwrite>:
void seg_vwrite(unsigned char port,unsigned char number)
{
	DIO_WRITE_PORT(port,num[number]);
 3f2:	e0 e7       	ldi	r30, 0x70	; 112
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	e6 0f       	add	r30, r22
 3f8:	f1 1d       	adc	r31, r1
 3fa:	60 81       	ld	r22, Z
 3fc:	0e 94 20 04 	call	0x840	; 0x840 <DIO_WRITE_PORT>
}
 400:	08 95       	ret

00000402 <bcd_vinit_lownipple>:
void bcd_vinit_lownipple(unsigned char port)
{
 402:	cf 93       	push	r28
 404:	c8 2f       	mov	r28, r24
	DIO_SET_PIN_DIRECTION(port,0,1);
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(port,1,1);
 40e:	8c 2f       	mov	r24, r28
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(port,2,1);
 418:	8c 2f       	mov	r24, r28
 41a:	62 e0       	ldi	r22, 0x02	; 2
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(port,3,1);
 422:	8c 2f       	mov	r24, r28
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
}
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <bcd_vinit_highnipple>:
void bcd_vinit_highnipple(unsigned char port)
{
 430:	cf 93       	push	r28
 432:	c8 2f       	mov	r28, r24
	DIO_SET_PIN_DIRECTION(port,4,1);
 434:	64 e0       	ldi	r22, 0x04	; 4
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(port,5,1);
 43c:	8c 2f       	mov	r24, r28
 43e:	65 e0       	ldi	r22, 0x05	; 5
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(port,6,1);
 446:	8c 2f       	mov	r24, r28
 448:	66 e0       	ldi	r22, 0x06	; 6
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION(port,7,1);
 450:	8c 2f       	mov	r24, r28
 452:	67 e0       	ldi	r22, 0x07	; 7
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
}
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <bcd_vwrite_lownipple>:
void bcd_vwrite_lownipple(unsigned char port,unsigned char val)
{
  DIO_WRITE_LowNipple(port,val);
 45e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DIO_WRITE_LowNipple>
}
 462:	08 95       	ret

00000464 <bcd_vwrite_highnipple>:
void bcd_vwrite_highnipple(unsigned char port,unsigned char val)
{
	DIO_WRITE_highNipple(port,val);
 464:	0e 94 2b 05 	call	0xa56	; 0xa56 <DIO_WRITE_highNipple>
}
 468:	08 95       	ret

0000046a <seg_set_enable_pin>:
void seg_set_enable_pin(char port, uint8_t pin)
{
	DIO_SET_PIN_DIRECTION(port,pin,1);
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
}
 470:	08 95       	ret

00000472 <seg_enable>:
void seg_enable(char port, char pin)
{
	DIO_WRITE(port,pin,0);
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
}
 478:	08 95       	ret

0000047a <seg_disable>:
void seg_disable(char port, char pin)
{
	DIO_WRITE(port,pin,1);
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_WRITE>
 480:	08 95       	ret

00000482 <DIO_SET_PIN_DIRECTION>:
#include<avr/io.h>
#include"bitwise.h"

void DIO_SET_PIN_DIRECTION(char port,char pin,char dir)
{
	switch(port)
 482:	84 34       	cpi	r24, 0x44	; 68
 484:	09 f4       	brne	.+2      	; 0x488 <DIO_SET_PIN_DIRECTION+0x6>
 486:	71 c0       	rjmp	.+226    	; 0x56a <DIO_SET_PIN_DIRECTION+0xe8>
 488:	85 34       	cpi	r24, 0x45	; 69
 48a:	48 f4       	brcc	.+18     	; 0x49e <DIO_SET_PIN_DIRECTION+0x1c>
 48c:	82 34       	cpi	r24, 0x42	; 66
 48e:	99 f1       	breq	.+102    	; 0x4f6 <DIO_SET_PIN_DIRECTION+0x74>
 490:	83 34       	cpi	r24, 0x43	; 67
 492:	08 f0       	brcs	.+2      	; 0x496 <DIO_SET_PIN_DIRECTION+0x14>
 494:	4d c0       	rjmp	.+154    	; 0x530 <DIO_SET_PIN_DIRECTION+0xae>
 496:	81 34       	cpi	r24, 0x41	; 65
 498:	09 f0       	breq	.+2      	; 0x49c <DIO_SET_PIN_DIRECTION+0x1a>
 49a:	83 c0       	rjmp	.+262    	; 0x5a2 <DIO_SET_PIN_DIRECTION+0x120>
 49c:	0f c0       	rjmp	.+30     	; 0x4bc <DIO_SET_PIN_DIRECTION+0x3a>
 49e:	82 36       	cpi	r24, 0x62	; 98
 4a0:	51 f1       	breq	.+84     	; 0x4f6 <DIO_SET_PIN_DIRECTION+0x74>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	20 f4       	brcc	.+8      	; 0x4ae <DIO_SET_PIN_DIRECTION+0x2c>
 4a6:	81 36       	cpi	r24, 0x61	; 97
 4a8:	09 f0       	breq	.+2      	; 0x4ac <DIO_SET_PIN_DIRECTION+0x2a>
 4aa:	7b c0       	rjmp	.+246    	; 0x5a2 <DIO_SET_PIN_DIRECTION+0x120>
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <DIO_SET_PIN_DIRECTION+0x3a>
 4ae:	83 36       	cpi	r24, 0x63	; 99
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <DIO_SET_PIN_DIRECTION+0x32>
 4b2:	3e c0       	rjmp	.+124    	; 0x530 <DIO_SET_PIN_DIRECTION+0xae>
 4b4:	84 36       	cpi	r24, 0x64	; 100
 4b6:	09 f0       	breq	.+2      	; 0x4ba <DIO_SET_PIN_DIRECTION+0x38>
 4b8:	74 c0       	rjmp	.+232    	; 0x5a2 <DIO_SET_PIN_DIRECTION+0x120>
 4ba:	57 c0       	rjmp	.+174    	; 0x56a <DIO_SET_PIN_DIRECTION+0xe8>
	{
		case 'A':
		case 'a': (dir==0)?(CLEAR(DDRA,pin)):(SET(DDRA,pin));
 4bc:	44 23       	and	r20, r20
 4be:	71 f4       	brne	.+28     	; 0x4dc <DIO_SET_PIN_DIRECTION+0x5a>
 4c0:	2a b3       	in	r18, 0x1a	; 26
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_SET_PIN_DIRECTION+0x4c>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_SET_PIN_DIRECTION+0x48>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	6a bb       	out	0x1a, r22	; 26
 4da:	08 95       	ret
 4dc:	2a b3       	in	r18, 0x1a	; 26
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	ac 01       	movw	r20, r24
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_SET_PIN_DIRECTION+0x68>
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_SET_PIN_DIRECTION+0x64>
 4ee:	ba 01       	movw	r22, r20
 4f0:	62 2b       	or	r22, r18
 4f2:	6a bb       	out	0x1a, r22	; 26
 4f4:	08 95       	ret
		break;
		case 'B':
		case 'b': (dir==0)?(CLEAR(DDRB,pin)):(SET(DDRB,pin));
 4f6:	44 23       	and	r20, r20
 4f8:	71 f4       	brne	.+28     	; 0x516 <DIO_SET_PIN_DIRECTION+0x94>
 4fa:	27 b3       	in	r18, 0x17	; 23
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_SET_PIN_DIRECTION+0x86>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_SET_PIN_DIRECTION+0x82>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	67 bb       	out	0x17, r22	; 23
 514:	08 95       	ret
 516:	27 b3       	in	r18, 0x17	; 23
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	ac 01       	movw	r20, r24
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_SET_PIN_DIRECTION+0xa2>
 520:	44 0f       	add	r20, r20
 522:	55 1f       	adc	r21, r21
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_SET_PIN_DIRECTION+0x9e>
 528:	ba 01       	movw	r22, r20
 52a:	62 2b       	or	r22, r18
 52c:	67 bb       	out	0x17, r22	; 23
 52e:	08 95       	ret
		break;
		case 'C':
		case 'c': (dir==0)?(CLEAR(DDRC,pin)):(SET(DDRC,pin));
 530:	44 23       	and	r20, r20
 532:	71 f4       	brne	.+28     	; 0x550 <DIO_SET_PIN_DIRECTION+0xce>
 534:	24 b3       	in	r18, 0x14	; 20
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_SET_PIN_DIRECTION+0xc0>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_SET_PIN_DIRECTION+0xbc>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	64 bb       	out	0x14, r22	; 20
 54e:	08 95       	ret
 550:	24 b3       	in	r18, 0x14	; 20
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	ac 01       	movw	r20, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_SET_PIN_DIRECTION+0xdc>
 55a:	44 0f       	add	r20, r20
 55c:	55 1f       	adc	r21, r21
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_SET_PIN_DIRECTION+0xd8>
 562:	ba 01       	movw	r22, r20
 564:	62 2b       	or	r22, r18
 566:	64 bb       	out	0x14, r22	; 20
 568:	08 95       	ret
		break;
		case 'D':
		case 'd': (dir==0)?(CLEAR(DDRD,pin)):(SET(DDRD,pin));
 56a:	44 23       	and	r20, r20
 56c:	71 f4       	brne	.+28     	; 0x58a <DIO_SET_PIN_DIRECTION+0x108>
 56e:	21 b3       	in	r18, 0x11	; 17
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	ac 01       	movw	r20, r24
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_SET_PIN_DIRECTION+0xfa>
 578:	44 0f       	add	r20, r20
 57a:	55 1f       	adc	r21, r21
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_SET_PIN_DIRECTION+0xf6>
 580:	ba 01       	movw	r22, r20
 582:	60 95       	com	r22
 584:	62 23       	and	r22, r18
 586:	61 bb       	out	0x11, r22	; 17
 588:	08 95       	ret
 58a:	21 b3       	in	r18, 0x11	; 17
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	ac 01       	movw	r20, r24
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_SET_PIN_DIRECTION+0x116>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_SET_PIN_DIRECTION+0x112>
 59c:	ba 01       	movw	r22, r20
 59e:	62 2b       	or	r22, r18
 5a0:	61 bb       	out	0x11, r22	; 17
 5a2:	08 95       	ret

000005a4 <DIO_WRITE>:
		break;
	}
}
void DIO_WRITE(char port,char pin,char val)
	{
		switch(port)
 5a4:	84 34       	cpi	r24, 0x44	; 68
 5a6:	09 f4       	brne	.+2      	; 0x5aa <DIO_WRITE+0x6>
 5a8:	71 c0       	rjmp	.+226    	; 0x68c <DIO_WRITE+0xe8>
 5aa:	85 34       	cpi	r24, 0x45	; 69
 5ac:	48 f4       	brcc	.+18     	; 0x5c0 <DIO_WRITE+0x1c>
 5ae:	82 34       	cpi	r24, 0x42	; 66
 5b0:	99 f1       	breq	.+102    	; 0x618 <DIO_WRITE+0x74>
 5b2:	83 34       	cpi	r24, 0x43	; 67
 5b4:	08 f0       	brcs	.+2      	; 0x5b8 <DIO_WRITE+0x14>
 5b6:	4d c0       	rjmp	.+154    	; 0x652 <DIO_WRITE+0xae>
 5b8:	81 34       	cpi	r24, 0x41	; 65
 5ba:	09 f0       	breq	.+2      	; 0x5be <DIO_WRITE+0x1a>
 5bc:	83 c0       	rjmp	.+262    	; 0x6c4 <DIO_WRITE+0x120>
 5be:	0f c0       	rjmp	.+30     	; 0x5de <DIO_WRITE+0x3a>
 5c0:	82 36       	cpi	r24, 0x62	; 98
 5c2:	51 f1       	breq	.+84     	; 0x618 <DIO_WRITE+0x74>
 5c4:	83 36       	cpi	r24, 0x63	; 99
 5c6:	20 f4       	brcc	.+8      	; 0x5d0 <DIO_WRITE+0x2c>
 5c8:	81 36       	cpi	r24, 0x61	; 97
 5ca:	09 f0       	breq	.+2      	; 0x5ce <DIO_WRITE+0x2a>
 5cc:	7b c0       	rjmp	.+246    	; 0x6c4 <DIO_WRITE+0x120>
 5ce:	07 c0       	rjmp	.+14     	; 0x5de <DIO_WRITE+0x3a>
 5d0:	83 36       	cpi	r24, 0x63	; 99
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <DIO_WRITE+0x32>
 5d4:	3e c0       	rjmp	.+124    	; 0x652 <DIO_WRITE+0xae>
 5d6:	84 36       	cpi	r24, 0x64	; 100
 5d8:	09 f0       	breq	.+2      	; 0x5dc <DIO_WRITE+0x38>
 5da:	74 c0       	rjmp	.+232    	; 0x6c4 <DIO_WRITE+0x120>
 5dc:	57 c0       	rjmp	.+174    	; 0x68c <DIO_WRITE+0xe8>
		{
			case 'a': 
			case'A':(val==1)?(SET(PORTA,pin)):(CLEAR(PORTA,pin));
 5de:	41 30       	cpi	r20, 0x01	; 1
 5e0:	69 f4       	brne	.+26     	; 0x5fc <DIO_WRITE+0x58>
 5e2:	2b b3       	in	r18, 0x1b	; 27
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	ac 01       	movw	r20, r24
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_WRITE+0x4c>
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_WRITE+0x48>
 5f4:	ba 01       	movw	r22, r20
 5f6:	62 2b       	or	r22, r18
 5f8:	6b bb       	out	0x1b, r22	; 27
 5fa:	08 95       	ret
 5fc:	2b b3       	in	r18, 0x1b	; 27
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	ac 01       	movw	r20, r24
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_WRITE+0x66>
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_WRITE+0x62>
 60e:	ba 01       	movw	r22, r20
 610:	60 95       	com	r22
 612:	62 23       	and	r22, r18
 614:	6b bb       	out	0x1b, r22	; 27
 616:	08 95       	ret
			break;
			case 'b':
			case'B':(val==1)?(SET(PORTB,pin)):(CLEAR(PORTB,pin));
 618:	41 30       	cpi	r20, 0x01	; 1
 61a:	69 f4       	brne	.+26     	; 0x636 <DIO_WRITE+0x92>
 61c:	28 b3       	in	r18, 0x18	; 24
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	ac 01       	movw	r20, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_WRITE+0x86>
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_WRITE+0x82>
 62e:	ba 01       	movw	r22, r20
 630:	62 2b       	or	r22, r18
 632:	68 bb       	out	0x18, r22	; 24
 634:	08 95       	ret
 636:	28 b3       	in	r18, 0x18	; 24
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	ac 01       	movw	r20, r24
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_WRITE+0xa0>
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_WRITE+0x9c>
 648:	ba 01       	movw	r22, r20
 64a:	60 95       	com	r22
 64c:	62 23       	and	r22, r18
 64e:	68 bb       	out	0x18, r22	; 24
 650:	08 95       	ret
			break;
			case 'c':
			case'C':(val==1)?(SET(PORTC,pin)):(CLEAR(PORTC,pin));
 652:	41 30       	cpi	r20, 0x01	; 1
 654:	69 f4       	brne	.+26     	; 0x670 <DIO_WRITE+0xcc>
 656:	25 b3       	in	r18, 0x15	; 21
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	ac 01       	movw	r20, r24
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_WRITE+0xc0>
 660:	44 0f       	add	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	6a 95       	dec	r22
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_WRITE+0xbc>
 668:	ba 01       	movw	r22, r20
 66a:	62 2b       	or	r22, r18
 66c:	65 bb       	out	0x15, r22	; 21
 66e:	08 95       	ret
 670:	25 b3       	in	r18, 0x15	; 21
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	ac 01       	movw	r20, r24
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_WRITE+0xda>
 67a:	44 0f       	add	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_WRITE+0xd6>
 682:	ba 01       	movw	r22, r20
 684:	60 95       	com	r22
 686:	62 23       	and	r22, r18
 688:	65 bb       	out	0x15, r22	; 21
 68a:	08 95       	ret
			break;
			case 'd':
			case'D':(val==1)?(SET(PORTD,pin)):(CLEAR(PORTD,pin));
 68c:	41 30       	cpi	r20, 0x01	; 1
 68e:	69 f4       	brne	.+26     	; 0x6aa <DIO_WRITE+0x106>
 690:	22 b3       	in	r18, 0x12	; 18
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	ac 01       	movw	r20, r24
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_WRITE+0xfa>
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_WRITE+0xf6>
 6a2:	ba 01       	movw	r22, r20
 6a4:	62 2b       	or	r22, r18
 6a6:	62 bb       	out	0x12, r22	; 18
 6a8:	08 95       	ret
 6aa:	22 b3       	in	r18, 0x12	; 18
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	ac 01       	movw	r20, r24
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_WRITE+0x114>
 6b4:	44 0f       	add	r20, r20
 6b6:	55 1f       	adc	r21, r21
 6b8:	6a 95       	dec	r22
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_WRITE+0x110>
 6bc:	ba 01       	movw	r22, r20
 6be:	60 95       	com	r22
 6c0:	62 23       	and	r22, r18
 6c2:	62 bb       	out	0x12, r22	; 18
 6c4:	08 95       	ret

000006c6 <DIO_TOGGLE>:
			break;
		}		
	}
void DIO_TOGGLE(char port,char pin)
	{
		switch(port)
 6c6:	83 34       	cpi	r24, 0x43	; 67
 6c8:	39 f1       	breq	.+78     	; 0x718 <DIO_TOGGLE+0x52>
 6ca:	84 34       	cpi	r24, 0x44	; 68
 6cc:	28 f4       	brcc	.+10     	; 0x6d8 <DIO_TOGGLE+0x12>
 6ce:	81 34       	cpi	r24, 0x41	; 65
 6d0:	49 f0       	breq	.+18     	; 0x6e4 <DIO_TOGGLE+0x1e>
 6d2:	82 34       	cpi	r24, 0x42	; 66
 6d4:	69 f5       	brne	.+90     	; 0x730 <DIO_TOGGLE+0x6a>
 6d6:	13 c0       	rjmp	.+38     	; 0x6fe <DIO_TOGGLE+0x38>
 6d8:	82 36       	cpi	r24, 0x62	; 98
 6da:	89 f0       	breq	.+34     	; 0x6fe <DIO_TOGGLE+0x38>
 6dc:	83 36       	cpi	r24, 0x63	; 99
 6de:	e1 f0       	breq	.+56     	; 0x718 <DIO_TOGGLE+0x52>
 6e0:	81 36       	cpi	r24, 0x61	; 97
 6e2:	31 f5       	brne	.+76     	; 0x730 <DIO_TOGGLE+0x6a>
		{
			case'a':
			case'A':(TOGGLE(PORTA,pin));
 6e4:	2b b3       	in	r18, 0x1b	; 27
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	ac 01       	movw	r20, r24
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_TOGGLE+0x2c>
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_TOGGLE+0x28>
 6f6:	ba 01       	movw	r22, r20
 6f8:	62 27       	eor	r22, r18
 6fa:	6b bb       	out	0x1b, r22	; 27
			break;
 6fc:	08 95       	ret
			case'b':
			case'B':(TOGGLE(PORTB,pin));
 6fe:	28 b3       	in	r18, 0x18	; 24
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	ac 01       	movw	r20, r24
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_TOGGLE+0x46>
 708:	44 0f       	add	r20, r20
 70a:	55 1f       	adc	r21, r21
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_TOGGLE+0x42>
 710:	ba 01       	movw	r22, r20
 712:	62 27       	eor	r22, r18
 714:	68 bb       	out	0x18, r22	; 24
			break;
 716:	08 95       	ret
			case'C':
			case'c':(TOGGLE(PORTC,pin));
 718:	25 b3       	in	r18, 0x15	; 21
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	ac 01       	movw	r20, r24
 720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_TOGGLE+0x60>
 722:	44 0f       	add	r20, r20
 724:	55 1f       	adc	r21, r21
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_TOGGLE+0x5c>
 72a:	ba 01       	movw	r22, r20
 72c:	62 27       	eor	r22, r18
 72e:	65 bb       	out	0x15, r22	; 21
 730:	08 95       	ret

00000732 <DIO_READ>:
	}

char DIO_READ(char port,char pin)
	{
		char return_value;
		switch(port)
 732:	84 34       	cpi	r24, 0x44	; 68
 734:	09 f4       	brne	.+2      	; 0x738 <DIO_READ+0x6>
 736:	51 c0       	rjmp	.+162    	; 0x7da <DIO_READ+0xa8>
 738:	85 34       	cpi	r24, 0x45	; 69
 73a:	40 f4       	brcc	.+16     	; 0x74c <DIO_READ+0x1a>
 73c:	82 34       	cpi	r24, 0x42	; 66
 73e:	39 f1       	breq	.+78     	; 0x78e <DIO_READ+0x5c>
 740:	83 34       	cpi	r24, 0x43	; 67
 742:	c0 f5       	brcc	.+112    	; 0x7b4 <DIO_READ+0x82>
 744:	81 34       	cpi	r24, 0x41	; 65
 746:	09 f0       	breq	.+2      	; 0x74a <DIO_READ+0x18>
 748:	5a c0       	rjmp	.+180    	; 0x7fe <DIO_READ+0xcc>
 74a:	0e c0       	rjmp	.+28     	; 0x768 <DIO_READ+0x36>
 74c:	82 36       	cpi	r24, 0x62	; 98
 74e:	f9 f0       	breq	.+62     	; 0x78e <DIO_READ+0x5c>
 750:	83 36       	cpi	r24, 0x63	; 99
 752:	20 f4       	brcc	.+8      	; 0x75c <DIO_READ+0x2a>
 754:	81 36       	cpi	r24, 0x61	; 97
 756:	09 f0       	breq	.+2      	; 0x75a <DIO_READ+0x28>
 758:	52 c0       	rjmp	.+164    	; 0x7fe <DIO_READ+0xcc>
 75a:	06 c0       	rjmp	.+12     	; 0x768 <DIO_READ+0x36>
 75c:	83 36       	cpi	r24, 0x63	; 99
 75e:	51 f1       	breq	.+84     	; 0x7b4 <DIO_READ+0x82>
 760:	84 36       	cpi	r24, 0x64	; 100
 762:	09 f0       	breq	.+2      	; 0x766 <DIO_READ+0x34>
 764:	4c c0       	rjmp	.+152    	; 0x7fe <DIO_READ+0xcc>
 766:	39 c0       	rjmp	.+114    	; 0x7da <DIO_READ+0xa8>
		{
			case'a':
			case'A':return_value=READ(PINA,pin);
 768:	29 b3       	in	r18, 0x19	; 25
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	06 2e       	mov	r0, r22
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_READ+0x44>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	0a 94       	dec	r0
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_READ+0x40>
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	82 23       	and	r24, r18
 77e:	93 23       	and	r25, r19
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_READ+0x54>
 782:	95 95       	asr	r25
 784:	87 95       	ror	r24
 786:	6a 95       	dec	r22
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_READ+0x50>
 78a:	98 2f       	mov	r25, r24
			break;
 78c:	38 c0       	rjmp	.+112    	; 0x7fe <DIO_READ+0xcc>
			case'b':
			case'B':return_value=READ(PINB,pin);
 78e:	26 b3       	in	r18, 0x16	; 22
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	06 2e       	mov	r0, r22
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_READ+0x6a>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	0a 94       	dec	r0
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_READ+0x66>
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	82 23       	and	r24, r18
 7a4:	93 23       	and	r25, r19
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_READ+0x7a>
 7a8:	95 95       	asr	r25
 7aa:	87 95       	ror	r24
 7ac:	6a 95       	dec	r22
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_READ+0x76>
 7b0:	98 2f       	mov	r25, r24
			break;
 7b2:	25 c0       	rjmp	.+74     	; 0x7fe <DIO_READ+0xcc>
			case'c':
			case'C':return_value=READ(PINC,pin);
 7b4:	23 b3       	in	r18, 0x13	; 19
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	06 2e       	mov	r0, r22
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_READ+0x90>
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	0a 94       	dec	r0
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_READ+0x8c>
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	82 23       	and	r24, r18
 7ca:	93 23       	and	r25, r19
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_READ+0xa0>
 7ce:	95 95       	asr	r25
 7d0:	87 95       	ror	r24
 7d2:	6a 95       	dec	r22
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_READ+0x9c>
 7d6:	98 2f       	mov	r25, r24
			break;
 7d8:	12 c0       	rjmp	.+36     	; 0x7fe <DIO_READ+0xcc>
			case'd':
			case'D':return_value=READ(PIND,pin);
 7da:	20 b3       	in	r18, 0x10	; 16
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	06 2e       	mov	r0, r22
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_READ+0xb6>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	0a 94       	dec	r0
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_READ+0xb2>
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	82 23       	and	r24, r18
 7f0:	93 23       	and	r25, r19
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_READ+0xc6>
 7f4:	95 95       	asr	r25
 7f6:	87 95       	ror	r24
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_READ+0xc2>
 7fc:	98 2f       	mov	r25, r24
			break;
		}
		return return_value;
	}
 7fe:	89 2f       	mov	r24, r25
 800:	08 95       	ret

00000802 <DIO_SET_PORT_DIRECTION>:
void DIO_SET_PORT_DIRECTION(char port,char val)
	{
		switch(port)
 802:	84 34       	cpi	r24, 0x44	; 68
 804:	d9 f0       	breq	.+54     	; 0x83c <DIO_SET_PORT_DIRECTION+0x3a>
 806:	85 34       	cpi	r24, 0x45	; 69
 808:	38 f4       	brcc	.+14     	; 0x818 <DIO_SET_PORT_DIRECTION+0x16>
 80a:	82 34       	cpi	r24, 0x42	; 66
 80c:	99 f0       	breq	.+38     	; 0x834 <DIO_SET_PORT_DIRECTION+0x32>
 80e:	83 34       	cpi	r24, 0x43	; 67
 810:	98 f4       	brcc	.+38     	; 0x838 <DIO_SET_PORT_DIRECTION+0x36>
 812:	81 34       	cpi	r24, 0x41	; 65
 814:	a1 f4       	brne	.+40     	; 0x83e <DIO_SET_PORT_DIRECTION+0x3c>
 816:	0c c0       	rjmp	.+24     	; 0x830 <DIO_SET_PORT_DIRECTION+0x2e>
 818:	82 36       	cpi	r24, 0x62	; 98
 81a:	61 f0       	breq	.+24     	; 0x834 <DIO_SET_PORT_DIRECTION+0x32>
 81c:	83 36       	cpi	r24, 0x63	; 99
 81e:	18 f4       	brcc	.+6      	; 0x826 <DIO_SET_PORT_DIRECTION+0x24>
 820:	81 36       	cpi	r24, 0x61	; 97
 822:	69 f4       	brne	.+26     	; 0x83e <DIO_SET_PORT_DIRECTION+0x3c>
 824:	05 c0       	rjmp	.+10     	; 0x830 <DIO_SET_PORT_DIRECTION+0x2e>
 826:	83 36       	cpi	r24, 0x63	; 99
 828:	39 f0       	breq	.+14     	; 0x838 <DIO_SET_PORT_DIRECTION+0x36>
 82a:	84 36       	cpi	r24, 0x64	; 100
 82c:	41 f4       	brne	.+16     	; 0x83e <DIO_SET_PORT_DIRECTION+0x3c>
 82e:	06 c0       	rjmp	.+12     	; 0x83c <DIO_SET_PORT_DIRECTION+0x3a>
		{
			case'a':
			case'A':DDRA=val;
 830:	6a bb       	out	0x1a, r22	; 26
			break;
 832:	08 95       	ret
			case'b':
			case'B':DDRB=val;
 834:	67 bb       	out	0x17, r22	; 23
			break;
 836:	08 95       	ret
			case'C':
			case'c':DDRC=val;
 838:	64 bb       	out	0x14, r22	; 20
			break;
 83a:	08 95       	ret
			case'D':
			case'd':(DDRD=val);
 83c:	61 bb       	out	0x11, r22	; 17
 83e:	08 95       	ret

00000840 <DIO_WRITE_PORT>:
			break;
		}
	}
void DIO_WRITE_PORT(char port,char val)
	{
		switch(port)
 840:	84 34       	cpi	r24, 0x44	; 68
 842:	d9 f0       	breq	.+54     	; 0x87a <__stack+0x1b>
 844:	85 34       	cpi	r24, 0x45	; 69
 846:	38 f4       	brcc	.+14     	; 0x856 <DIO_WRITE_PORT+0x16>
 848:	82 34       	cpi	r24, 0x42	; 66
 84a:	99 f0       	breq	.+38     	; 0x872 <__stack+0x13>
 84c:	83 34       	cpi	r24, 0x43	; 67
 84e:	98 f4       	brcc	.+38     	; 0x876 <__stack+0x17>
 850:	81 34       	cpi	r24, 0x41	; 65
 852:	a1 f4       	brne	.+40     	; 0x87c <__stack+0x1d>
 854:	0c c0       	rjmp	.+24     	; 0x86e <__stack+0xf>
 856:	82 36       	cpi	r24, 0x62	; 98
 858:	61 f0       	breq	.+24     	; 0x872 <__stack+0x13>
 85a:	83 36       	cpi	r24, 0x63	; 99
 85c:	18 f4       	brcc	.+6      	; 0x864 <__stack+0x5>
 85e:	81 36       	cpi	r24, 0x61	; 97
 860:	69 f4       	brne	.+26     	; 0x87c <__stack+0x1d>
 862:	05 c0       	rjmp	.+10     	; 0x86e <__stack+0xf>
 864:	83 36       	cpi	r24, 0x63	; 99
 866:	39 f0       	breq	.+14     	; 0x876 <__stack+0x17>
 868:	84 36       	cpi	r24, 0x64	; 100
 86a:	41 f4       	brne	.+16     	; 0x87c <__stack+0x1d>
 86c:	06 c0       	rjmp	.+12     	; 0x87a <__stack+0x1b>
		{
			case'a':
			case'A':PORTA=val;
 86e:	6b bb       	out	0x1b, r22	; 27
			break;
 870:	08 95       	ret
			case'b':
			case'B':PORTB=val;
 872:	68 bb       	out	0x18, r22	; 24
			break;
 874:	08 95       	ret
			case'c':
			case'C':PORTC=val;
 876:	65 bb       	out	0x15, r22	; 21
			break;
 878:	08 95       	ret
			case'd':
			case'D':PORTD=val;
 87a:	62 bb       	out	0x12, r22	; 18
 87c:	08 95       	ret

0000087e <DIO_TOGGLE_PORT>:
			break;
		}
	}
void DIO_TOGGLE_PORT(char port)
	{
		switch(port)
 87e:	84 34       	cpi	r24, 0x44	; 68
 880:	09 f1       	breq	.+66     	; 0x8c4 <DIO_TOGGLE_PORT+0x46>
 882:	85 34       	cpi	r24, 0x45	; 69
 884:	38 f4       	brcc	.+14     	; 0x894 <DIO_TOGGLE_PORT+0x16>
 886:	82 34       	cpi	r24, 0x42	; 66
 888:	a9 f0       	breq	.+42     	; 0x8b4 <DIO_TOGGLE_PORT+0x36>
 88a:	83 34       	cpi	r24, 0x43	; 67
 88c:	b8 f4       	brcc	.+46     	; 0x8bc <DIO_TOGGLE_PORT+0x3e>
 88e:	81 34       	cpi	r24, 0x41	; 65
 890:	e1 f4       	brne	.+56     	; 0x8ca <DIO_TOGGLE_PORT+0x4c>
 892:	0c c0       	rjmp	.+24     	; 0x8ac <DIO_TOGGLE_PORT+0x2e>
 894:	82 36       	cpi	r24, 0x62	; 98
 896:	71 f0       	breq	.+28     	; 0x8b4 <DIO_TOGGLE_PORT+0x36>
 898:	83 36       	cpi	r24, 0x63	; 99
 89a:	18 f4       	brcc	.+6      	; 0x8a2 <DIO_TOGGLE_PORT+0x24>
 89c:	81 36       	cpi	r24, 0x61	; 97
 89e:	a9 f4       	brne	.+42     	; 0x8ca <DIO_TOGGLE_PORT+0x4c>
 8a0:	05 c0       	rjmp	.+10     	; 0x8ac <DIO_TOGGLE_PORT+0x2e>
 8a2:	83 36       	cpi	r24, 0x63	; 99
 8a4:	59 f0       	breq	.+22     	; 0x8bc <DIO_TOGGLE_PORT+0x3e>
 8a6:	84 36       	cpi	r24, 0x64	; 100
 8a8:	81 f4       	brne	.+32     	; 0x8ca <DIO_TOGGLE_PORT+0x4c>
 8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <DIO_TOGGLE_PORT+0x46>
		{
			case'a':
			case'A':PORTA^=0xff;
 8ac:	8b b3       	in	r24, 0x1b	; 27
 8ae:	80 95       	com	r24
 8b0:	8b bb       	out	0x1b, r24	; 27
			break;
 8b2:	08 95       	ret
			case'b':
			case'B':PORTB^=0xff;
 8b4:	88 b3       	in	r24, 0x18	; 24
 8b6:	80 95       	com	r24
 8b8:	88 bb       	out	0x18, r24	; 24
			break;
 8ba:	08 95       	ret
			case'c':
			case'C':PORTC^=0xff;
 8bc:	85 b3       	in	r24, 0x15	; 21
 8be:	80 95       	com	r24
 8c0:	85 bb       	out	0x15, r24	; 21
			break;
 8c2:	08 95       	ret
			case'd':
			case'D':PORTD^=0xff;
 8c4:	82 b3       	in	r24, 0x12	; 18
 8c6:	80 95       	com	r24
 8c8:	82 bb       	out	0x12, r24	; 18
 8ca:	08 95       	ret

000008cc <DIO_vConnectPullUp>:
			break;
		}
	}	
void DIO_vConnectPullUp(char port,char pin,char connect)
{
	switch(port)
 8cc:	84 34       	cpi	r24, 0x44	; 68
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <DIO_vConnectPullUp+0x6>
 8d0:	71 c0       	rjmp	.+226    	; 0x9b4 <DIO_vConnectPullUp+0xe8>
 8d2:	85 34       	cpi	r24, 0x45	; 69
 8d4:	48 f4       	brcc	.+18     	; 0x8e8 <DIO_vConnectPullUp+0x1c>
 8d6:	82 34       	cpi	r24, 0x42	; 66
 8d8:	99 f1       	breq	.+102    	; 0x940 <DIO_vConnectPullUp+0x74>
 8da:	83 34       	cpi	r24, 0x43	; 67
 8dc:	08 f0       	brcs	.+2      	; 0x8e0 <DIO_vConnectPullUp+0x14>
 8de:	4d c0       	rjmp	.+154    	; 0x97a <DIO_vConnectPullUp+0xae>
 8e0:	81 34       	cpi	r24, 0x41	; 65
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <DIO_vConnectPullUp+0x1a>
 8e4:	83 c0       	rjmp	.+262    	; 0x9ec <DIO_vConnectPullUp+0x120>
 8e6:	0f c0       	rjmp	.+30     	; 0x906 <DIO_vConnectPullUp+0x3a>
 8e8:	82 36       	cpi	r24, 0x62	; 98
 8ea:	51 f1       	breq	.+84     	; 0x940 <DIO_vConnectPullUp+0x74>
 8ec:	83 36       	cpi	r24, 0x63	; 99
 8ee:	20 f4       	brcc	.+8      	; 0x8f8 <DIO_vConnectPullUp+0x2c>
 8f0:	81 36       	cpi	r24, 0x61	; 97
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <DIO_vConnectPullUp+0x2a>
 8f4:	7b c0       	rjmp	.+246    	; 0x9ec <DIO_vConnectPullUp+0x120>
 8f6:	07 c0       	rjmp	.+14     	; 0x906 <DIO_vConnectPullUp+0x3a>
 8f8:	83 36       	cpi	r24, 0x63	; 99
 8fa:	09 f4       	brne	.+2      	; 0x8fe <DIO_vConnectPullUp+0x32>
 8fc:	3e c0       	rjmp	.+124    	; 0x97a <DIO_vConnectPullUp+0xae>
 8fe:	84 36       	cpi	r24, 0x64	; 100
 900:	09 f0       	breq	.+2      	; 0x904 <DIO_vConnectPullUp+0x38>
 902:	74 c0       	rjmp	.+232    	; 0x9ec <DIO_vConnectPullUp+0x120>
 904:	57 c0       	rjmp	.+174    	; 0x9b4 <DIO_vConnectPullUp+0xe8>
	{
		case'a':
		case'A':(connect==1)? (SET(PORTA,pin)):(CLEAR(PORTA,pin));
 906:	41 30       	cpi	r20, 0x01	; 1
 908:	69 f4       	brne	.+26     	; 0x924 <DIO_vConnectPullUp+0x58>
 90a:	2b b3       	in	r18, 0x1b	; 27
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	ac 01       	movw	r20, r24
 912:	02 c0       	rjmp	.+4      	; 0x918 <DIO_vConnectPullUp+0x4c>
 914:	44 0f       	add	r20, r20
 916:	55 1f       	adc	r21, r21
 918:	6a 95       	dec	r22
 91a:	e2 f7       	brpl	.-8      	; 0x914 <DIO_vConnectPullUp+0x48>
 91c:	ba 01       	movw	r22, r20
 91e:	62 2b       	or	r22, r18
 920:	6b bb       	out	0x1b, r22	; 27
 922:	08 95       	ret
 924:	2b b3       	in	r18, 0x1b	; 27
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	ac 01       	movw	r20, r24
 92c:	02 c0       	rjmp	.+4      	; 0x932 <DIO_vConnectPullUp+0x66>
 92e:	44 0f       	add	r20, r20
 930:	55 1f       	adc	r21, r21
 932:	6a 95       	dec	r22
 934:	e2 f7       	brpl	.-8      	; 0x92e <DIO_vConnectPullUp+0x62>
 936:	ba 01       	movw	r22, r20
 938:	60 95       	com	r22
 93a:	62 23       	and	r22, r18
 93c:	6b bb       	out	0x1b, r22	; 27
 93e:	08 95       	ret
		break;
		case'b':
		case'B':(connect==1)? (SET(PORTB,pin)):(CLEAR(PORTB,pin));
 940:	41 30       	cpi	r20, 0x01	; 1
 942:	69 f4       	brne	.+26     	; 0x95e <DIO_vConnectPullUp+0x92>
 944:	28 b3       	in	r18, 0x18	; 24
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	ac 01       	movw	r20, r24
 94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_vConnectPullUp+0x86>
 94e:	44 0f       	add	r20, r20
 950:	55 1f       	adc	r21, r21
 952:	6a 95       	dec	r22
 954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_vConnectPullUp+0x82>
 956:	ba 01       	movw	r22, r20
 958:	62 2b       	or	r22, r18
 95a:	68 bb       	out	0x18, r22	; 24
 95c:	08 95       	ret
 95e:	28 b3       	in	r18, 0x18	; 24
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	ac 01       	movw	r20, r24
 966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_vConnectPullUp+0xa0>
 968:	44 0f       	add	r20, r20
 96a:	55 1f       	adc	r21, r21
 96c:	6a 95       	dec	r22
 96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_vConnectPullUp+0x9c>
 970:	ba 01       	movw	r22, r20
 972:	60 95       	com	r22
 974:	62 23       	and	r22, r18
 976:	68 bb       	out	0x18, r22	; 24
 978:	08 95       	ret
		break;
		case'C':
		case'c':(connect==1)? (SET(PORTC,pin)):(CLEAR(PORTC,pin));
 97a:	41 30       	cpi	r20, 0x01	; 1
 97c:	69 f4       	brne	.+26     	; 0x998 <DIO_vConnectPullUp+0xcc>
 97e:	25 b3       	in	r18, 0x15	; 21
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	ac 01       	movw	r20, r24
 986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_vConnectPullUp+0xc0>
 988:	44 0f       	add	r20, r20
 98a:	55 1f       	adc	r21, r21
 98c:	6a 95       	dec	r22
 98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_vConnectPullUp+0xbc>
 990:	ba 01       	movw	r22, r20
 992:	62 2b       	or	r22, r18
 994:	65 bb       	out	0x15, r22	; 21
 996:	08 95       	ret
 998:	25 b3       	in	r18, 0x15	; 21
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	ac 01       	movw	r20, r24
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <DIO_vConnectPullUp+0xda>
 9a2:	44 0f       	add	r20, r20
 9a4:	55 1f       	adc	r21, r21
 9a6:	6a 95       	dec	r22
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <DIO_vConnectPullUp+0xd6>
 9aa:	ba 01       	movw	r22, r20
 9ac:	60 95       	com	r22
 9ae:	62 23       	and	r22, r18
 9b0:	65 bb       	out	0x15, r22	; 21
 9b2:	08 95       	ret
		break;	
		case'd':
		case'D':(connect==1)? (SET(PORTD,pin)):(CLEAR(PORTD,pin));
 9b4:	41 30       	cpi	r20, 0x01	; 1
 9b6:	69 f4       	brne	.+26     	; 0x9d2 <DIO_vConnectPullUp+0x106>
 9b8:	22 b3       	in	r18, 0x12	; 18
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	ac 01       	movw	r20, r24
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_vConnectPullUp+0xfa>
 9c2:	44 0f       	add	r20, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	6a 95       	dec	r22
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_vConnectPullUp+0xf6>
 9ca:	ba 01       	movw	r22, r20
 9cc:	62 2b       	or	r22, r18
 9ce:	62 bb       	out	0x12, r22	; 18
 9d0:	08 95       	ret
 9d2:	22 b3       	in	r18, 0x12	; 18
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	ac 01       	movw	r20, r24
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <DIO_vConnectPullUp+0x114>
 9dc:	44 0f       	add	r20, r20
 9de:	55 1f       	adc	r21, r21
 9e0:	6a 95       	dec	r22
 9e2:	e2 f7       	brpl	.-8      	; 0x9dc <DIO_vConnectPullUp+0x110>
 9e4:	ba 01       	movw	r22, r20
 9e6:	60 95       	com	r22
 9e8:	62 23       	and	r22, r18
 9ea:	62 bb       	out	0x12, r22	; 18
 9ec:	08 95       	ret

000009ee <DIO_WRITE_LowNipple>:
		break;
	}
}
void DIO_WRITE_LowNipple(unsigned char port,unsigned char val)
{
		val&=0x0f;
 9ee:	6f 70       	andi	r22, 0x0F	; 15
		switch(port)
 9f0:	84 34       	cpi	r24, 0x44	; 68
 9f2:	51 f1       	breq	.+84     	; 0xa48 <DIO_WRITE_LowNipple+0x5a>
 9f4:	85 34       	cpi	r24, 0x45	; 69
 9f6:	38 f4       	brcc	.+14     	; 0xa06 <DIO_WRITE_LowNipple+0x18>
 9f8:	82 34       	cpi	r24, 0x42	; 66
 9fa:	c1 f0       	breq	.+48     	; 0xa2c <DIO_WRITE_LowNipple+0x3e>
 9fc:	83 34       	cpi	r24, 0x43	; 67
 9fe:	e8 f4       	brcc	.+58     	; 0xa3a <DIO_WRITE_LowNipple+0x4c>
 a00:	81 34       	cpi	r24, 0x41	; 65
 a02:	41 f5       	brne	.+80     	; 0xa54 <DIO_WRITE_LowNipple+0x66>
 a04:	0c c0       	rjmp	.+24     	; 0xa1e <DIO_WRITE_LowNipple+0x30>
 a06:	82 36       	cpi	r24, 0x62	; 98
 a08:	89 f0       	breq	.+34     	; 0xa2c <DIO_WRITE_LowNipple+0x3e>
 a0a:	83 36       	cpi	r24, 0x63	; 99
 a0c:	18 f4       	brcc	.+6      	; 0xa14 <DIO_WRITE_LowNipple+0x26>
 a0e:	81 36       	cpi	r24, 0x61	; 97
 a10:	09 f5       	brne	.+66     	; 0xa54 <DIO_WRITE_LowNipple+0x66>
 a12:	05 c0       	rjmp	.+10     	; 0xa1e <DIO_WRITE_LowNipple+0x30>
 a14:	83 36       	cpi	r24, 0x63	; 99
 a16:	89 f0       	breq	.+34     	; 0xa3a <DIO_WRITE_LowNipple+0x4c>
 a18:	84 36       	cpi	r24, 0x64	; 100
 a1a:	e1 f4       	brne	.+56     	; 0xa54 <DIO_WRITE_LowNipple+0x66>
 a1c:	15 c0       	rjmp	.+42     	; 0xa48 <DIO_WRITE_LowNipple+0x5a>
		{	
			case'a':
			case 'A':
			PORTA&=0xf0;
 a1e:	8b b3       	in	r24, 0x1b	; 27
 a20:	80 7f       	andi	r24, 0xF0	; 240
 a22:	8b bb       	out	0x1b, r24	; 27
			PORTA|=val;
 a24:	8b b3       	in	r24, 0x1b	; 27
 a26:	68 2b       	or	r22, r24
 a28:	6b bb       	out	0x1b, r22	; 27
			break;
 a2a:	08 95       	ret
			case 'B':
			case'b':
			PORTB&=0xf0;
 a2c:	88 b3       	in	r24, 0x18	; 24
 a2e:	80 7f       	andi	r24, 0xF0	; 240
 a30:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 a32:	88 b3       	in	r24, 0x18	; 24
 a34:	68 2b       	or	r22, r24
 a36:	68 bb       	out	0x18, r22	; 24
			break;
 a38:	08 95       	ret
			case'c':
			case 'C':
			PORTC&=0xf0;
 a3a:	85 b3       	in	r24, 0x15	; 21
 a3c:	80 7f       	andi	r24, 0xF0	; 240
 a3e:	85 bb       	out	0x15, r24	; 21
			PORTC|=val;
 a40:	85 b3       	in	r24, 0x15	; 21
 a42:	68 2b       	or	r22, r24
 a44:	65 bb       	out	0x15, r22	; 21
			break;
 a46:	08 95       	ret
			case 'D':
			case'd':
			PORTD&=0xf0;
 a48:	82 b3       	in	r24, 0x12	; 18
 a4a:	80 7f       	andi	r24, 0xF0	; 240
 a4c:	82 bb       	out	0x12, r24	; 18
			PORTD|=val;
 a4e:	82 b3       	in	r24, 0x12	; 18
 a50:	68 2b       	or	r22, r24
 a52:	62 bb       	out	0x12, r22	; 18
 a54:	08 95       	ret

00000a56 <DIO_WRITE_highNipple>:
		}
}
void DIO_WRITE_highNipple(unsigned char port,unsigned char val)
{
	val&=0x0f;
	val=val<<4;
 a56:	62 95       	swap	r22
 a58:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 a5a:	84 34       	cpi	r24, 0x44	; 68
 a5c:	51 f1       	breq	.+84     	; 0xab2 <DIO_WRITE_highNipple+0x5c>
 a5e:	85 34       	cpi	r24, 0x45	; 69
 a60:	38 f4       	brcc	.+14     	; 0xa70 <DIO_WRITE_highNipple+0x1a>
 a62:	82 34       	cpi	r24, 0x42	; 66
 a64:	c1 f0       	breq	.+48     	; 0xa96 <DIO_WRITE_highNipple+0x40>
 a66:	83 34       	cpi	r24, 0x43	; 67
 a68:	e8 f4       	brcc	.+58     	; 0xaa4 <DIO_WRITE_highNipple+0x4e>
 a6a:	81 34       	cpi	r24, 0x41	; 65
 a6c:	41 f5       	brne	.+80     	; 0xabe <DIO_WRITE_highNipple+0x68>
 a6e:	0c c0       	rjmp	.+24     	; 0xa88 <DIO_WRITE_highNipple+0x32>
 a70:	82 36       	cpi	r24, 0x62	; 98
 a72:	89 f0       	breq	.+34     	; 0xa96 <DIO_WRITE_highNipple+0x40>
 a74:	83 36       	cpi	r24, 0x63	; 99
 a76:	18 f4       	brcc	.+6      	; 0xa7e <DIO_WRITE_highNipple+0x28>
 a78:	81 36       	cpi	r24, 0x61	; 97
 a7a:	09 f5       	brne	.+66     	; 0xabe <DIO_WRITE_highNipple+0x68>
 a7c:	05 c0       	rjmp	.+10     	; 0xa88 <DIO_WRITE_highNipple+0x32>
 a7e:	83 36       	cpi	r24, 0x63	; 99
 a80:	89 f0       	breq	.+34     	; 0xaa4 <DIO_WRITE_highNipple+0x4e>
 a82:	84 36       	cpi	r24, 0x64	; 100
 a84:	e1 f4       	brne	.+56     	; 0xabe <DIO_WRITE_highNipple+0x68>
 a86:	15 c0       	rjmp	.+42     	; 0xab2 <DIO_WRITE_highNipple+0x5c>
	{
		case'a':
		case 'A':
		PORTA&=0x0f;
 a88:	8b b3       	in	r24, 0x1b	; 27
 a8a:	8f 70       	andi	r24, 0x0F	; 15
 a8c:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val;
 a8e:	8b b3       	in	r24, 0x1b	; 27
 a90:	68 2b       	or	r22, r24
 a92:	6b bb       	out	0x1b, r22	; 27
		break;
 a94:	08 95       	ret
		case 'B':
		case'b':
		PORTB&=0x0f;
 a96:	88 b3       	in	r24, 0x18	; 24
 a98:	8f 70       	andi	r24, 0x0F	; 15
 a9a:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 a9c:	88 b3       	in	r24, 0x18	; 24
 a9e:	68 2b       	or	r22, r24
 aa0:	68 bb       	out	0x18, r22	; 24
		break;
 aa2:	08 95       	ret
		case'c':
		case 'C':
		PORTC&=0x0f;
 aa4:	85 b3       	in	r24, 0x15	; 21
 aa6:	8f 70       	andi	r24, 0x0F	; 15
 aa8:	85 bb       	out	0x15, r24	; 21
		PORTC|=val;
 aaa:	85 b3       	in	r24, 0x15	; 21
 aac:	68 2b       	or	r22, r24
 aae:	65 bb       	out	0x15, r22	; 21
		break;
 ab0:	08 95       	ret
		case 'D':
		case'd':
		PORTD&=0x0f;
 ab2:	82 b3       	in	r24, 0x12	; 18
 ab4:	8f 70       	andi	r24, 0x0F	; 15
 ab6:	82 bb       	out	0x12, r24	; 18
		PORTD|=val;
 ab8:	82 b3       	in	r24, 0x12	; 18
 aba:	68 2b       	or	r22, r24
 abc:	62 bb       	out	0x12, r22	; 18
 abe:	08 95       	ret

00000ac0 <Timer_NormalMode>:
#include<avr/interrupt.h>
#include "bitwise.h"
#include"Timer.h"
void Timer_NormalMode()
{
	SET(ASSR,AS2);//for external clock
 ac0:	82 b5       	in	r24, 0x22	; 34
 ac2:	88 60       	ori	r24, 0x08	; 8
 ac4:	82 bd       	out	0x22, r24	; 34
	SET(TCCR2,CS20);
 ac6:	85 b5       	in	r24, 0x25	; 37
 ac8:	81 60       	ori	r24, 0x01	; 1
 aca:	85 bd       	out	0x25, r24	; 37
	SET(TCCR2,CS22);//choose clock as prescaler of 256 of MP freq
 acc:	85 b5       	in	r24, 0x25	; 37
 ace:	84 60       	ori	r24, 0x04	; 4
 ad0:	85 bd       	out	0x25, r24	; 37
	sei();
 ad2:	78 94       	sei
	SET(TIMSK,TOIE2);//enable interrupt of overflow
 ad4:	89 b7       	in	r24, 0x39	; 57
 ad6:	80 64       	ori	r24, 0x40	; 64
 ad8:	89 bf       	out	0x39, r24	; 57

}
 ada:	08 95       	ret

00000adc <Timer0_CTC_vint>:
void Timer0_CTC_vint()
{
	SET(TCCR0,WGM01);
 adc:	83 b7       	in	r24, 0x33	; 51
 ade:	88 60       	ori	r24, 0x08	; 8
 ae0:	83 bf       	out	0x33, r24	; 51
	CLEAR(TCCR0,WGM00);//choose CTC mode
 ae2:	83 b7       	in	r24, 0x33	; 51
 ae4:	8f 7b       	andi	r24, 0xBF	; 191
 ae6:	83 bf       	out	0x33, r24	; 51
	SET(TCCR0,CS00);
 ae8:	83 b7       	in	r24, 0x33	; 51
 aea:	81 60       	ori	r24, 0x01	; 1
 aec:	83 bf       	out	0x33, r24	; 51
	SET(TCCR0,CS02);//choose clock as prescaler of 1024 of MP freq
 aee:	83 b7       	in	r24, 0x33	; 51
 af0:	84 60       	ori	r24, 0x04	; 4
 af2:	83 bf       	out	0x33, r24	; 51
	OCR0=value;
 af4:	80 e4       	ldi	r24, 0x40	; 64
 af6:	8c bf       	out	0x3c, r24	; 60
	SET(TIMSK,OCIE0);//enable interrupt of CTC
 af8:	89 b7       	in	r24, 0x39	; 57
 afa:	82 60       	ori	r24, 0x02	; 2
 afc:	89 bf       	out	0x39, r24	; 57
	sei();
 afe:	78 94       	sei
	
}
 b00:	08 95       	ret

00000b02 <Timer_WG_nonPWM>:
void Timer_WG_nonPWM()
{
	DIO_SET_PIN_DIRECTION('b',3,1);
 b02:	82 e6       	ldi	r24, 0x62	; 98
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	63 e0       	ldi	r22, 0x03	; 3
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	41 e0       	ldi	r20, 0x01	; 1
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
	SET(TCCR0,WGM01);
 b12:	83 b7       	in	r24, 0x33	; 51
 b14:	88 60       	ori	r24, 0x08	; 8
 b16:	83 bf       	out	0x33, r24	; 51
	CLEAR(TCCR0,WGM00);//choose CTC mode
 b18:	83 b7       	in	r24, 0x33	; 51
 b1a:	8f 7b       	andi	r24, 0xBF	; 191
 b1c:	83 bf       	out	0x33, r24	; 51
	SET(TCCR0,CS00);
 b1e:	83 b7       	in	r24, 0x33	; 51
 b20:	81 60       	ori	r24, 0x01	; 1
 b22:	83 bf       	out	0x33, r24	; 51
	SET(TCCR0,CS02);//choose clock as prescaler of 1024 of MP freq
 b24:	83 b7       	in	r24, 0x33	; 51
 b26:	84 60       	ori	r24, 0x04	; 4
 b28:	83 bf       	out	0x33, r24	; 51
	OCR0=value;
 b2a:	80 e4       	ldi	r24, 0x40	; 64
 b2c:	8c bf       	out	0x3c, r24	; 60
	SET(TCCR0,COM00); //toggle OC0
 b2e:	83 b7       	in	r24, 0x33	; 51
 b30:	80 61       	ori	r24, 0x10	; 16
 b32:	83 bf       	out	0x33, r24	; 51
	
}
 b34:	08 95       	ret

00000b36 <Timer_FastPWM>:
void Timer_FastPWM()
{
		DIO_SET_PIN_DIRECTION('b',3,1);
 b36:	82 e6       	ldi	r24, 0x62	; 98
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	63 e0       	ldi	r22, 0x03	; 3
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	41 e0       	ldi	r20, 0x01	; 1
 b40:	50 e0       	ldi	r21, 0x00	; 0
 b42:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
		SET(TCCR0,WGM01);
 b46:	83 b7       	in	r24, 0x33	; 51
 b48:	88 60       	ori	r24, 0x08	; 8
 b4a:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,WGM00);//choose fast PWM mode
 b4c:	83 b7       	in	r24, 0x33	; 51
 b4e:	80 64       	ori	r24, 0x40	; 64
 b50:	83 bf       	out	0x33, r24	; 51
		OCR0=value;
 b52:	80 e4       	ldi	r24, 0x40	; 64
 b54:	8c bf       	out	0x3c, r24	; 60
		SET(TCCR0,CS00);
 b56:	83 b7       	in	r24, 0x33	; 51
 b58:	81 60       	ori	r24, 0x01	; 1
 b5a:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,CS02);//choose clock as prescaler of 1024 of MP freq
 b5c:	83 b7       	in	r24, 0x33	; 51
 b5e:	84 60       	ori	r24, 0x04	; 4
 b60:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,COM01); //clear on compare match
 b62:	83 b7       	in	r24, 0x33	; 51
 b64:	80 62       	ori	r24, 0x20	; 32
 b66:	83 bf       	out	0x33, r24	; 51
		CLEAR(TCCR0,COM00);
 b68:	83 b7       	in	r24, 0x33	; 51
 b6a:	8f 7e       	andi	r24, 0xEF	; 239
 b6c:	83 bf       	out	0x33, r24	; 51
}
 b6e:	08 95       	ret

00000b70 <Timer_PhasePWM>:
void Timer_PhasePWM()
{
		DIO_SET_PIN_DIRECTION('b',3,1);
 b70:	82 e6       	ldi	r24, 0x62	; 98
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	63 e0       	ldi	r22, 0x03	; 3
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	41 e0       	ldi	r20, 0x01	; 1
 b7a:	50 e0       	ldi	r21, 0x00	; 0
 b7c:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SET_PIN_DIRECTION>
		SET(TCCR0,WGM00);//choose fast PWM mode
 b80:	83 b7       	in	r24, 0x33	; 51
 b82:	80 64       	ori	r24, 0x40	; 64
 b84:	83 bf       	out	0x33, r24	; 51
		OCR0=value;
 b86:	80 e4       	ldi	r24, 0x40	; 64
 b88:	8c bf       	out	0x3c, r24	; 60
		SET(TCCR0,CS00);
 b8a:	83 b7       	in	r24, 0x33	; 51
 b8c:	81 60       	ori	r24, 0x01	; 1
 b8e:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,CS02);//choose clock as prescaler of 1024 of MP freq
 b90:	83 b7       	in	r24, 0x33	; 51
 b92:	84 60       	ori	r24, 0x04	; 4
 b94:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,COM01); //clear on compare match
 b96:	83 b7       	in	r24, 0x33	; 51
 b98:	80 62       	ori	r24, 0x20	; 32
 b9a:	83 bf       	out	0x33, r24	; 51
		CLEAR(TCCR0,COM00);
 b9c:	83 b7       	in	r24, 0x33	; 51
 b9e:	8f 7e       	andi	r24, 0xEF	; 239
 ba0:	83 bf       	out	0x33, r24	; 51
 ba2:	08 95       	ret

00000ba4 <main>:
volatile uint8_t minutes=0;
volatile uint8_t hours=0;
extern unsigned char num[];
int main(void)
{ 
	seg_vinit('a');
 ba4:	81 e6       	ldi	r24, 0x61	; 97
 ba6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <seg_vinit>
	seg_set_enable_pin('c',4);
 baa:	83 e6       	ldi	r24, 0x63	; 99
 bac:	64 e0       	ldi	r22, 0x04	; 4
 bae:	0e 94 35 02 	call	0x46a	; 0x46a <seg_set_enable_pin>
	seg_set_enable_pin('c',5);
 bb2:	83 e6       	ldi	r24, 0x63	; 99
 bb4:	65 e0       	ldi	r22, 0x05	; 5
 bb6:	0e 94 35 02 	call	0x46a	; 0x46a <seg_set_enable_pin>
	seg_set_enable_pin('B',4);
 bba:	82 e4       	ldi	r24, 0x42	; 66
 bbc:	64 e0       	ldi	r22, 0x04	; 4
 bbe:	0e 94 35 02 	call	0x46a	; 0x46a <seg_set_enable_pin>
	seg_set_enable_pin('B',5);
 bc2:	82 e4       	ldi	r24, 0x42	; 66
 bc4:	65 e0       	ldi	r22, 0x05	; 5
 bc6:	0e 94 35 02 	call	0x46a	; 0x46a <seg_set_enable_pin>
	seg_set_enable_pin('B',6);
 bca:	82 e4       	ldi	r24, 0x42	; 66
 bcc:	66 e0       	ldi	r22, 0x06	; 6
 bce:	0e 94 35 02 	call	0x46a	; 0x46a <seg_set_enable_pin>
	seg_set_enable_pin('B',7);
 bd2:	82 e4       	ldi	r24, 0x42	; 66
 bd4:	67 e0       	ldi	r22, 0x07	; 7
 bd6:	0e 94 35 02 	call	0x46a	; 0x46a <seg_set_enable_pin>
	seg_disable('c',4);
 bda:	83 e6       	ldi	r24, 0x63	; 99
 bdc:	64 e0       	ldi	r22, 0x04	; 4
 bde:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
	seg_disable('c',5);
 be2:	83 e6       	ldi	r24, 0x63	; 99
 be4:	65 e0       	ldi	r22, 0x05	; 5
 be6:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
	seg_disable('B',4);
 bea:	82 e4       	ldi	r24, 0x42	; 66
 bec:	64 e0       	ldi	r22, 0x04	; 4
 bee:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
	seg_disable('B',5);
 bf2:	82 e4       	ldi	r24, 0x42	; 66
 bf4:	65 e0       	ldi	r22, 0x05	; 5
 bf6:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
	seg_disable('B',6);
 bfa:	82 e4       	ldi	r24, 0x42	; 66
 bfc:	66 e0       	ldi	r22, 0x06	; 6
 bfe:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
	seg_disable('B',7);
 c02:	82 e4       	ldi	r24, 0x42	; 66
 c04:	67 e0       	ldi	r22, 0x07	; 7
 c06:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
	LCD_vInit();
 c0a:	0e 94 23 01 	call	0x246	; 0x246 <LCD_vInit>
	Keypad_vInt('d');
 c0e:	84 e6       	ldi	r24, 0x64	; 100
 c10:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_vInt>
	LCD_vSend_string("Press 1 to");
 c14:	80 e8       	ldi	r24, 0x80	; 128
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
	LCD_vMove_Cursor(2,1);
 c1c:	82 e0       	ldi	r24, 0x02	; 2
 c1e:	61 e0       	ldi	r22, 0x01	; 1
 c20:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_vMove_Cursor>
	LCD_vSend_string("set clock");
 c24:	8b e8       	ldi	r24, 0x8B	; 139
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
	uint8_t val=NotPressed;
		Timer_NormalMode();
 c2c:	0e 94 60 05 	call	0xac0	; 0xac0 <Timer_NormalMode>
		}
		if(hours>=24)
			hours=0;
		seg_enable('c',4);
		seg_disable('c',5);
		seg_vwrite('a',seconds%10);
 c30:	ca e0       	ldi	r28, 0x0A	; 10
			val=KeypadRead('d');
			if(val=='1')
			{
				val=NotPressed;
				LCD_vClear_Screen();
				LCD_vSend_string("hours: ");
 c32:	05 e9       	ldi	r16, 0x95	; 149
 c34:	10 e0       	ldi	r17, 0x00	; 0
				hours+=(val-48);
				LCD_vSend_char(val);
				_delay_ms(1000);
				val=NotPressed;
				LCD_vClear_Screen();
				LCD_vSend_string("minutes: ");
 c36:	0f 2e       	mov	r0, r31
 c38:	fd e9       	ldi	r31, 0x9D	; 157
 c3a:	ef 2e       	mov	r14, r31
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	ff 2e       	mov	r15, r31
 c40:	f0 2d       	mov	r31, r0
				minutes+=(val-48);
				LCD_vSend_char(val);
				_delay_ms(1000);
				val=NotPressed;
				LCD_vClear_Screen();
				LCD_vSend_string("seconds: ");
 c42:	0f 2e       	mov	r0, r31
 c44:	f7 ea       	ldi	r31, 0xA7	; 167
 c46:	cf 2e       	mov	r12, r31
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	df 2e       	mov	r13, r31
 c4c:	f0 2d       	mov	r31, r0
				_delay_ms(300);
				seconds+=(val-48);
				LCD_vSend_char(val);
				_delay_ms(1000);
				LCD_vClear_Screen();
				LCD_vSend_string("Press 1 to");
 c4e:	0f 2e       	mov	r0, r31
 c50:	f0 e8       	ldi	r31, 0x80	; 128
 c52:	af 2e       	mov	r10, r31
 c54:	f0 e0       	ldi	r31, 0x00	; 0
 c56:	bf 2e       	mov	r11, r31
 c58:	f0 2d       	mov	r31, r0
				LCD_vMove_Cursor(2,1);
				LCD_vSend_string("set clock");
 c5a:	0f 2e       	mov	r0, r31
 c5c:	fb e8       	ldi	r31, 0x8B	; 139
 c5e:	8f 2e       	mov	r8, r31
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	9f 2e       	mov	r9, r31
 c64:	f0 2d       	mov	r31, r0
	uint8_t val=NotPressed;
		Timer_NormalMode();
	
    while(1)
    {
		if(seconds>=60)
 c66:	80 91 b4 00 	lds	r24, 0x00B4
 c6a:	8c 33       	cpi	r24, 0x3C	; 60
 c6c:	38 f0       	brcs	.+14     	; 0xc7c <main+0xd8>
		{
			seconds=0;
 c6e:	10 92 b4 00 	sts	0x00B4, r1
			minutes++;
 c72:	80 91 b3 00 	lds	r24, 0x00B3
 c76:	8f 5f       	subi	r24, 0xFF	; 255
 c78:	80 93 b3 00 	sts	0x00B3, r24
		}
		if(minutes>=60)
 c7c:	80 91 b3 00 	lds	r24, 0x00B3
 c80:	8c 33       	cpi	r24, 0x3C	; 60
 c82:	38 f0       	brcs	.+14     	; 0xc92 <main+0xee>
		{
				minutes=0;
 c84:	10 92 b3 00 	sts	0x00B3, r1
				hours++;
 c88:	80 91 b2 00 	lds	r24, 0x00B2
 c8c:	8f 5f       	subi	r24, 0xFF	; 255
 c8e:	80 93 b2 00 	sts	0x00B2, r24
		}
		if(hours>=24)
 c92:	80 91 b2 00 	lds	r24, 0x00B2
 c96:	88 31       	cpi	r24, 0x18	; 24
 c98:	10 f0       	brcs	.+4      	; 0xc9e <main+0xfa>
			hours=0;
 c9a:	10 92 b2 00 	sts	0x00B2, r1
		seg_enable('c',4);
 c9e:	83 e6       	ldi	r24, 0x63	; 99
 ca0:	64 e0       	ldi	r22, 0x04	; 4
 ca2:	0e 94 39 02 	call	0x472	; 0x472 <seg_enable>
		seg_disable('c',5);
 ca6:	83 e6       	ldi	r24, 0x63	; 99
 ca8:	65 e0       	ldi	r22, 0x05	; 5
 caa:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
		seg_vwrite('a',seconds%10);
 cae:	80 91 b4 00 	lds	r24, 0x00B4
 cb2:	6c 2f       	mov	r22, r28
 cb4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodqi4>
 cb8:	81 e6       	ldi	r24, 0x61	; 97
 cba:	69 2f       	mov	r22, r25
 cbc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <seg_vwrite>
 cc0:	8f ec       	ldi	r24, 0xCF	; 207
 cc2:	97 e0       	ldi	r25, 0x07	; 7
 cc4:	01 97       	sbiw	r24, 0x01	; 1
 cc6:	f1 f7       	brne	.-4      	; 0xcc4 <main+0x120>
 cc8:	00 c0       	rjmp	.+0      	; 0xcca <main+0x126>
 cca:	00 00       	nop
		_delay_ms(1);
		
		seg_enable('c',5);
 ccc:	83 e6       	ldi	r24, 0x63	; 99
 cce:	65 e0       	ldi	r22, 0x05	; 5
 cd0:	0e 94 39 02 	call	0x472	; 0x472 <seg_enable>
		seg_disable('c',4);
 cd4:	83 e6       	ldi	r24, 0x63	; 99
 cd6:	64 e0       	ldi	r22, 0x04	; 4
 cd8:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
		seg_vwrite('a',seconds/10);
 cdc:	80 91 b4 00 	lds	r24, 0x00B4
 ce0:	6c 2f       	mov	r22, r28
 ce2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodqi4>
 ce6:	68 2f       	mov	r22, r24
 ce8:	81 e6       	ldi	r24, 0x61	; 97
 cea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <seg_vwrite>
 cee:	af ec       	ldi	r26, 0xCF	; 207
 cf0:	b7 e0       	ldi	r27, 0x07	; 7
 cf2:	11 97       	sbiw	r26, 0x01	; 1
 cf4:	f1 f7       	brne	.-4      	; 0xcf2 <main+0x14e>
 cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <main+0x154>
 cf8:	00 00       	nop
		_delay_ms(1);
		
		seg_disable('c',5);
 cfa:	83 e6       	ldi	r24, 0x63	; 99
 cfc:	65 e0       	ldi	r22, 0x05	; 5
 cfe:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
		seg_enable('b',4);
 d02:	82 e6       	ldi	r24, 0x62	; 98
 d04:	64 e0       	ldi	r22, 0x04	; 4
 d06:	0e 94 39 02 	call	0x472	; 0x472 <seg_enable>
		seg_vwrite('a',minutes%10);
 d0a:	80 91 b3 00 	lds	r24, 0x00B3
 d0e:	6c 2f       	mov	r22, r28
 d10:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodqi4>
 d14:	81 e6       	ldi	r24, 0x61	; 97
 d16:	69 2f       	mov	r22, r25
 d18:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <seg_vwrite>
 d1c:	8f ec       	ldi	r24, 0xCF	; 207
 d1e:	97 e0       	ldi	r25, 0x07	; 7
 d20:	01 97       	sbiw	r24, 0x01	; 1
 d22:	f1 f7       	brne	.-4      	; 0xd20 <main+0x17c>
 d24:	00 c0       	rjmp	.+0      	; 0xd26 <main+0x182>
 d26:	00 00       	nop
		_delay_ms(1);
		
		seg_enable('b',5);
 d28:	82 e6       	ldi	r24, 0x62	; 98
 d2a:	65 e0       	ldi	r22, 0x05	; 5
 d2c:	0e 94 39 02 	call	0x472	; 0x472 <seg_enable>
		seg_disable('b',4);
 d30:	82 e6       	ldi	r24, 0x62	; 98
 d32:	64 e0       	ldi	r22, 0x04	; 4
 d34:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
		seg_vwrite('a',minutes/10);
 d38:	80 91 b3 00 	lds	r24, 0x00B3
 d3c:	6c 2f       	mov	r22, r28
 d3e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodqi4>
 d42:	68 2f       	mov	r22, r24
 d44:	81 e6       	ldi	r24, 0x61	; 97
 d46:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <seg_vwrite>
 d4a:	af ec       	ldi	r26, 0xCF	; 207
 d4c:	b7 e0       	ldi	r27, 0x07	; 7
 d4e:	11 97       	sbiw	r26, 0x01	; 1
 d50:	f1 f7       	brne	.-4      	; 0xd4e <main+0x1aa>
 d52:	00 c0       	rjmp	.+0      	; 0xd54 <main+0x1b0>
 d54:	00 00       	nop
		_delay_ms(1);
		
		seg_disable('b',5);
 d56:	82 e6       	ldi	r24, 0x62	; 98
 d58:	65 e0       	ldi	r22, 0x05	; 5
 d5a:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
		seg_enable('b',6);
 d5e:	82 e6       	ldi	r24, 0x62	; 98
 d60:	66 e0       	ldi	r22, 0x06	; 6
 d62:	0e 94 39 02 	call	0x472	; 0x472 <seg_enable>
		seg_vwrite('a',hours%10);
 d66:	80 91 b2 00 	lds	r24, 0x00B2
 d6a:	6c 2f       	mov	r22, r28
 d6c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodqi4>
 d70:	81 e6       	ldi	r24, 0x61	; 97
 d72:	69 2f       	mov	r22, r25
 d74:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <seg_vwrite>
 d78:	8f ec       	ldi	r24, 0xCF	; 207
 d7a:	97 e0       	ldi	r25, 0x07	; 7
 d7c:	01 97       	sbiw	r24, 0x01	; 1
 d7e:	f1 f7       	brne	.-4      	; 0xd7c <main+0x1d8>
 d80:	00 c0       	rjmp	.+0      	; 0xd82 <main+0x1de>
 d82:	00 00       	nop
		_delay_ms(1);
		
		seg_enable('b',7);
 d84:	82 e6       	ldi	r24, 0x62	; 98
 d86:	67 e0       	ldi	r22, 0x07	; 7
 d88:	0e 94 39 02 	call	0x472	; 0x472 <seg_enable>
		seg_disable('b',6);
 d8c:	82 e6       	ldi	r24, 0x62	; 98
 d8e:	66 e0       	ldi	r22, 0x06	; 6
 d90:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
		seg_vwrite('a',hours/10);
 d94:	80 91 b2 00 	lds	r24, 0x00B2
 d98:	6c 2f       	mov	r22, r28
 d9a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodqi4>
 d9e:	68 2f       	mov	r22, r24
 da0:	81 e6       	ldi	r24, 0x61	; 97
 da2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <seg_vwrite>
 da6:	af ec       	ldi	r26, 0xCF	; 207
 da8:	b7 e0       	ldi	r27, 0x07	; 7
 daa:	11 97       	sbiw	r26, 0x01	; 1
 dac:	f1 f7       	brne	.-4      	; 0xdaa <main+0x206>
 dae:	00 c0       	rjmp	.+0      	; 0xdb0 <main+0x20c>
 db0:	00 00       	nop
		_delay_ms(1);
		
		seg_disable('b',7);
 db2:	82 e6       	ldi	r24, 0x62	; 98
 db4:	67 e0       	ldi	r22, 0x07	; 7
 db6:	0e 94 3d 02 	call	0x47a	; 0x47a <seg_disable>
 dba:	8f e0       	ldi	r24, 0x0F	; 15
 dbc:	97 e2       	ldi	r25, 0x27	; 39
 dbe:	01 97       	sbiw	r24, 0x01	; 1
 dc0:	f1 f7       	brne	.-4      	; 0xdbe <main+0x21a>
 dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <main+0x220>
 dc4:	00 00       	nop
		_delay_ms(5);
			val=KeypadRead('d');
 dc6:	84 e6       	ldi	r24, 0x64	; 100
 dc8:	0e 94 88 00 	call	0x110	; 0x110 <KeypadRead>
			if(val=='1')
 dcc:	81 33       	cpi	r24, 0x31	; 49
 dce:	09 f0       	breq	.+2      	; 0xdd2 <main+0x22e>
 dd0:	4a cf       	rjmp	.-364    	; 0xc66 <main+0xc2>
			{
				val=NotPressed;
				LCD_vClear_Screen();
 dd2:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_vClear_Screen>
				LCD_vSend_string("hours: ");
 dd6:	c8 01       	movw	r24, r16
 dd8:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
 ddc:	2f ef       	ldi	r18, 0xFF	; 255
 dde:	32 e5       	ldi	r19, 0x52	; 82
 de0:	47 e0       	ldi	r20, 0x07	; 7
 de2:	21 50       	subi	r18, 0x01	; 1
 de4:	30 40       	sbci	r19, 0x00	; 0
 de6:	40 40       	sbci	r20, 0x00	; 0
 de8:	e1 f7       	brne	.-8      	; 0xde2 <main+0x23e>
 dea:	00 c0       	rjmp	.+0      	; 0xdec <main+0x248>
 dec:	00 00       	nop
				_delay_ms(300);
				do
				{
					val=KeypadRead('d');
 dee:	84 e6       	ldi	r24, 0x64	; 100
 df0:	0e 94 88 00 	call	0x110	; 0x110 <KeypadRead>
				}
				while(val==NotPressed);
 df4:	8f 3f       	cpi	r24, 0xFF	; 255
 df6:	d9 f3       	breq	.-10     	; 0xdee <main+0x24a>
 df8:	2f ef       	ldi	r18, 0xFF	; 255
 dfa:	32 e5       	ldi	r19, 0x52	; 82
 dfc:	47 e0       	ldi	r20, 0x07	; 7
 dfe:	21 50       	subi	r18, 0x01	; 1
 e00:	30 40       	sbci	r19, 0x00	; 0
 e02:	40 40       	sbci	r20, 0x00	; 0
 e04:	e1 f7       	brne	.-8      	; 0xdfe <main+0x25a>
 e06:	00 c0       	rjmp	.+0      	; 0xe08 <main+0x264>
 e08:	00 00       	nop
				_delay_ms(300);					
				hours=(val-48)*10;
 e0a:	98 2f       	mov	r25, r24
 e0c:	99 0f       	add	r25, r25
 e0e:	29 2f       	mov	r18, r25
 e10:	22 0f       	add	r18, r18
 e12:	22 0f       	add	r18, r18
 e14:	92 0f       	add	r25, r18
 e16:	90 5e       	subi	r25, 0xE0	; 224
 e18:	90 93 b2 00 	sts	0x00B2, r25
				LCD_vSend_char(val);
 e1c:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSend_char>
				val=NotPressed	;	
				do
				{
					val=KeypadRead('d');
 e20:	84 e6       	ldi	r24, 0x64	; 100
 e22:	0e 94 88 00 	call	0x110	; 0x110 <KeypadRead>
				}while(val==NotPressed );
 e26:	8f 3f       	cpi	r24, 0xFF	; 255
 e28:	d9 f3       	breq	.-10     	; 0xe20 <main+0x27c>
 e2a:	2f ef       	ldi	r18, 0xFF	; 255
 e2c:	32 e5       	ldi	r19, 0x52	; 82
 e2e:	47 e0       	ldi	r20, 0x07	; 7
 e30:	21 50       	subi	r18, 0x01	; 1
 e32:	30 40       	sbci	r19, 0x00	; 0
 e34:	40 40       	sbci	r20, 0x00	; 0
 e36:	e1 f7       	brne	.-8      	; 0xe30 <main+0x28c>
 e38:	00 c0       	rjmp	.+0      	; 0xe3a <main+0x296>
 e3a:	00 00       	nop
				_delay_ms(300);
				hours+=(val-48);
 e3c:	90 91 b2 00 	lds	r25, 0x00B2
 e40:	90 53       	subi	r25, 0x30	; 48
 e42:	98 0f       	add	r25, r24
 e44:	90 93 b2 00 	sts	0x00B2, r25
				LCD_vSend_char(val);
 e48:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSend_char>
 e4c:	8f ef       	ldi	r24, 0xFF	; 255
 e4e:	99 e6       	ldi	r25, 0x69	; 105
 e50:	a8 e1       	ldi	r26, 0x18	; 24
 e52:	81 50       	subi	r24, 0x01	; 1
 e54:	90 40       	sbci	r25, 0x00	; 0
 e56:	a0 40       	sbci	r26, 0x00	; 0
 e58:	e1 f7       	brne	.-8      	; 0xe52 <main+0x2ae>
 e5a:	00 c0       	rjmp	.+0      	; 0xe5c <main+0x2b8>
 e5c:	00 00       	nop
				_delay_ms(1000);
				val=NotPressed;
				LCD_vClear_Screen();
 e5e:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_vClear_Screen>
				LCD_vSend_string("minutes: ");
 e62:	c7 01       	movw	r24, r14
 e64:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
 e68:	2f ef       	ldi	r18, 0xFF	; 255
 e6a:	32 e5       	ldi	r19, 0x52	; 82
 e6c:	47 e0       	ldi	r20, 0x07	; 7
 e6e:	21 50       	subi	r18, 0x01	; 1
 e70:	30 40       	sbci	r19, 0x00	; 0
 e72:	40 40       	sbci	r20, 0x00	; 0
 e74:	e1 f7       	brne	.-8      	; 0xe6e <main+0x2ca>
 e76:	00 c0       	rjmp	.+0      	; 0xe78 <main+0x2d4>
 e78:	00 00       	nop
				_delay_ms(300);
				do
				{
					val=KeypadRead('d');
 e7a:	84 e6       	ldi	r24, 0x64	; 100
 e7c:	0e 94 88 00 	call	0x110	; 0x110 <KeypadRead>
				}
				while(val==NotPressed);
 e80:	8f 3f       	cpi	r24, 0xFF	; 255
 e82:	d9 f3       	breq	.-10     	; 0xe7a <main+0x2d6>
 e84:	2f ef       	ldi	r18, 0xFF	; 255
 e86:	32 e5       	ldi	r19, 0x52	; 82
 e88:	47 e0       	ldi	r20, 0x07	; 7
 e8a:	21 50       	subi	r18, 0x01	; 1
 e8c:	30 40       	sbci	r19, 0x00	; 0
 e8e:	40 40       	sbci	r20, 0x00	; 0
 e90:	e1 f7       	brne	.-8      	; 0xe8a <main+0x2e6>
 e92:	00 c0       	rjmp	.+0      	; 0xe94 <main+0x2f0>
 e94:	00 00       	nop
				_delay_ms(300);					
				minutes=(val-48)*10;
 e96:	98 2f       	mov	r25, r24
 e98:	99 0f       	add	r25, r25
 e9a:	29 2f       	mov	r18, r25
 e9c:	22 0f       	add	r18, r18
 e9e:	22 0f       	add	r18, r18
 ea0:	92 0f       	add	r25, r18
 ea2:	90 5e       	subi	r25, 0xE0	; 224
 ea4:	90 93 b3 00 	sts	0x00B3, r25
				LCD_vSend_char(val);
 ea8:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSend_char>
				val=NotPressed	;	
				do
				{
					val=KeypadRead('d');
 eac:	84 e6       	ldi	r24, 0x64	; 100
 eae:	0e 94 88 00 	call	0x110	; 0x110 <KeypadRead>
				}while(val==NotPressed );
 eb2:	8f 3f       	cpi	r24, 0xFF	; 255
 eb4:	d9 f3       	breq	.-10     	; 0xeac <main+0x308>
 eb6:	2f ef       	ldi	r18, 0xFF	; 255
 eb8:	32 e5       	ldi	r19, 0x52	; 82
 eba:	47 e0       	ldi	r20, 0x07	; 7
 ebc:	21 50       	subi	r18, 0x01	; 1
 ebe:	30 40       	sbci	r19, 0x00	; 0
 ec0:	40 40       	sbci	r20, 0x00	; 0
 ec2:	e1 f7       	brne	.-8      	; 0xebc <main+0x318>
 ec4:	00 c0       	rjmp	.+0      	; 0xec6 <main+0x322>
 ec6:	00 00       	nop
				_delay_ms(300);
				minutes+=(val-48);
 ec8:	90 91 b3 00 	lds	r25, 0x00B3
 ecc:	90 53       	subi	r25, 0x30	; 48
 ece:	98 0f       	add	r25, r24
 ed0:	90 93 b3 00 	sts	0x00B3, r25
				LCD_vSend_char(val);
 ed4:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSend_char>
 ed8:	8f ef       	ldi	r24, 0xFF	; 255
 eda:	99 e6       	ldi	r25, 0x69	; 105
 edc:	a8 e1       	ldi	r26, 0x18	; 24
 ede:	81 50       	subi	r24, 0x01	; 1
 ee0:	90 40       	sbci	r25, 0x00	; 0
 ee2:	a0 40       	sbci	r26, 0x00	; 0
 ee4:	e1 f7       	brne	.-8      	; 0xede <main+0x33a>
 ee6:	00 c0       	rjmp	.+0      	; 0xee8 <main+0x344>
 ee8:	00 00       	nop
				_delay_ms(1000);
				val=NotPressed;
				LCD_vClear_Screen();
 eea:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_vClear_Screen>
				LCD_vSend_string("seconds: ");
 eee:	c6 01       	movw	r24, r12
 ef0:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
 ef4:	2f ef       	ldi	r18, 0xFF	; 255
 ef6:	32 e5       	ldi	r19, 0x52	; 82
 ef8:	47 e0       	ldi	r20, 0x07	; 7
 efa:	21 50       	subi	r18, 0x01	; 1
 efc:	30 40       	sbci	r19, 0x00	; 0
 efe:	40 40       	sbci	r20, 0x00	; 0
 f00:	e1 f7       	brne	.-8      	; 0xefa <main+0x356>
 f02:	00 c0       	rjmp	.+0      	; 0xf04 <main+0x360>
 f04:	00 00       	nop
				_delay_ms(300);
				do
				{
					val=KeypadRead('d');
 f06:	84 e6       	ldi	r24, 0x64	; 100
 f08:	0e 94 88 00 	call	0x110	; 0x110 <KeypadRead>
				}
				while(val==NotPressed);
 f0c:	8f 3f       	cpi	r24, 0xFF	; 255
 f0e:	d9 f3       	breq	.-10     	; 0xf06 <main+0x362>
 f10:	2f ef       	ldi	r18, 0xFF	; 255
 f12:	32 e5       	ldi	r19, 0x52	; 82
 f14:	47 e0       	ldi	r20, 0x07	; 7
 f16:	21 50       	subi	r18, 0x01	; 1
 f18:	30 40       	sbci	r19, 0x00	; 0
 f1a:	40 40       	sbci	r20, 0x00	; 0
 f1c:	e1 f7       	brne	.-8      	; 0xf16 <main+0x372>
 f1e:	00 c0       	rjmp	.+0      	; 0xf20 <main+0x37c>
 f20:	00 00       	nop
				_delay_ms(300);
				seconds=(val-48)*10;
 f22:	98 2f       	mov	r25, r24
 f24:	99 0f       	add	r25, r25
 f26:	29 2f       	mov	r18, r25
 f28:	22 0f       	add	r18, r18
 f2a:	22 0f       	add	r18, r18
 f2c:	92 0f       	add	r25, r18
 f2e:	90 5e       	subi	r25, 0xE0	; 224
 f30:	90 93 b4 00 	sts	0x00B4, r25
				LCD_vSend_char(val);
 f34:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSend_char>
				val=NotPressed	;
				do
				{
					val=KeypadRead('d');
 f38:	84 e6       	ldi	r24, 0x64	; 100
 f3a:	0e 94 88 00 	call	0x110	; 0x110 <KeypadRead>
				}while(val==NotPressed );
 f3e:	8f 3f       	cpi	r24, 0xFF	; 255
 f40:	d9 f3       	breq	.-10     	; 0xf38 <main+0x394>
 f42:	2f ef       	ldi	r18, 0xFF	; 255
 f44:	32 e5       	ldi	r19, 0x52	; 82
 f46:	47 e0       	ldi	r20, 0x07	; 7
 f48:	21 50       	subi	r18, 0x01	; 1
 f4a:	30 40       	sbci	r19, 0x00	; 0
 f4c:	40 40       	sbci	r20, 0x00	; 0
 f4e:	e1 f7       	brne	.-8      	; 0xf48 <main+0x3a4>
 f50:	00 c0       	rjmp	.+0      	; 0xf52 <main+0x3ae>
 f52:	00 00       	nop
				_delay_ms(300);
				seconds+=(val-48);
 f54:	90 91 b4 00 	lds	r25, 0x00B4
 f58:	90 53       	subi	r25, 0x30	; 48
 f5a:	98 0f       	add	r25, r24
 f5c:	90 93 b4 00 	sts	0x00B4, r25
				LCD_vSend_char(val);
 f60:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSend_char>
 f64:	8f ef       	ldi	r24, 0xFF	; 255
 f66:	99 e6       	ldi	r25, 0x69	; 105
 f68:	a8 e1       	ldi	r26, 0x18	; 24
 f6a:	81 50       	subi	r24, 0x01	; 1
 f6c:	90 40       	sbci	r25, 0x00	; 0
 f6e:	a0 40       	sbci	r26, 0x00	; 0
 f70:	e1 f7       	brne	.-8      	; 0xf6a <main+0x3c6>
 f72:	00 c0       	rjmp	.+0      	; 0xf74 <main+0x3d0>
 f74:	00 00       	nop
				_delay_ms(1000);
				LCD_vClear_Screen();
 f76:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_vClear_Screen>
				LCD_vSend_string("Press 1 to");
 f7a:	c5 01       	movw	r24, r10
 f7c:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
				LCD_vMove_Cursor(2,1);
 f80:	82 e0       	ldi	r24, 0x02	; 2
 f82:	61 e0       	ldi	r22, 0x01	; 1
 f84:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_vMove_Cursor>
				LCD_vSend_string("set clock");
 f88:	c4 01       	movw	r24, r8
 f8a:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
 f8e:	6b ce       	rjmp	.-810    	; 0xc66 <main+0xc2>

00000f90 <__vector_5>:
		
		
    }
}
ISR(TIMER2_OVF_vect)
{
 f90:	1f 92       	push	r1
 f92:	0f 92       	push	r0
 f94:	0f b6       	in	r0, 0x3f	; 63
 f96:	0f 92       	push	r0
 f98:	11 24       	eor	r1, r1
 f9a:	8f 93       	push	r24
	seconds++;
 f9c:	80 91 b4 00 	lds	r24, 0x00B4
 fa0:	8f 5f       	subi	r24, 0xFF	; 255
 fa2:	80 93 b4 00 	sts	0x00B4, r24
	
 fa6:	8f 91       	pop	r24
 fa8:	0f 90       	pop	r0
 faa:	0f be       	out	0x3f, r0	; 63
 fac:	0f 90       	pop	r0
 fae:	1f 90       	pop	r1
 fb0:	18 95       	reti

00000fb2 <__udivmodqi4>:
 fb2:	99 1b       	sub	r25, r25
 fb4:	79 e0       	ldi	r23, 0x09	; 9
 fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <__udivmodqi4_ep>

00000fb8 <__udivmodqi4_loop>:
 fb8:	99 1f       	adc	r25, r25
 fba:	96 17       	cp	r25, r22
 fbc:	08 f0       	brcs	.+2      	; 0xfc0 <__udivmodqi4_ep>
 fbe:	96 1b       	sub	r25, r22

00000fc0 <__udivmodqi4_ep>:
 fc0:	88 1f       	adc	r24, r24
 fc2:	7a 95       	dec	r23
 fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__udivmodqi4_loop>
 fc6:	80 95       	com	r24
 fc8:	08 95       	ret

00000fca <_exit>:
 fca:	f8 94       	cli

00000fcc <__stop_program>:
 fcc:	ff cf       	rjmp	.-2      	; 0xfcc <__stop_program>
